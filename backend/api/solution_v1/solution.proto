syntax = "proto3";

package deploy;

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";
import "google/api/annotations.proto";
import "validate/validate.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "https://gitlab.crja72.ru/gospec/go16/easydeploy/backend/pkg/solution;solution_v1";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Solution API"
    version: "1.0.0"
    contact: {
      name: "Dmitriy Burin"
      email: "hahahihi@mail.com"
    };
  };

  host: "localhost:8080",
  schemes: HTTP,
  schemes: HTTPS,
  consumes: "application/json",
  produces: "application/json",
};

service SolutionV1 {
  // Получение доступных решений
  rpc List(ListRequest) returns (ListResponse) {
    option (google.api.http) = {
      get: "/solution/v1/list"
    };
  }
  // Создание задачи на деплой
  rpc Deploy(DeployRequest) returns (DeployResponse) {
    option (google.api.http) = {
      post: "/solution/v1/deploy"
      body: "*"
    };
  }
  // Получение статуса деплоя
  rpc GetDeployStatus(GetDeployStatusRequest) returns (GetDeployStatusResponse) {
    option (google.api.http) = {
      get: "/solution/v1/get_status"
    };
  }
}

enum SolutionStatus {
  UNKNOWN = 0;
}

message SolutionInfo {
  string name = 1 [(validate.rules).string = {min_len: 1, max_len: 50}];
  SolutionStatus status = 2;
}

message Solution {
  int64 id = 1;
  SolutionInfo info = 2;
  google.protobuf.Timestamp created_at = 3;
  google.protobuf.Timestamp updated_at = 4;
}

message ListRequest {
}

message ListResponse {
  repeated Solution solutions = 1;
}

message DeployRequest {
}

message DeployResponse {
}

message GetDeployStatusRequest {
}

message GetDeployStatusResponse {
}