// Code generated by http://github.com/gojuno/minimock (v3.3.10). DO NOT EDIT.

package mocks

//go:generate minimock -i gitlab.crja72.ru/gospec/go16/easydeploy/backend/internal/repository.DeployRepository -o deploy_repository_minimock.go -n DeployRepositoryMock -p mocks

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"gitlab.crja72.ru/gospec/go16/easydeploy/backend/internal/model"
)

// DeployRepositoryMock implements repository.DeployRepository
type DeployRepositoryMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcDeploy          func(ctx context.Context, deploy *model.Deploy) (i1 int64, err error)
	inspectFuncDeploy   func(ctx context.Context, deploy *model.Deploy)
	afterDeployCounter  uint64
	beforeDeployCounter uint64
	DeployMock          mDeployRepositoryMockDeploy

	funcGet          func(ctx context.Context, id int64) (dp1 *model.Deploy, err error)
	inspectFuncGet   func(ctx context.Context, id int64)
	afterGetCounter  uint64
	beforeGetCounter uint64
	GetMock          mDeployRepositoryMockGet
}

// NewDeployRepositoryMock returns a mock for repository.DeployRepository
func NewDeployRepositoryMock(t minimock.Tester) *DeployRepositoryMock {
	m := &DeployRepositoryMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.DeployMock = mDeployRepositoryMockDeploy{mock: m}
	m.DeployMock.callArgs = []*DeployRepositoryMockDeployParams{}

	m.GetMock = mDeployRepositoryMockGet{mock: m}
	m.GetMock.callArgs = []*DeployRepositoryMockGetParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mDeployRepositoryMockDeploy struct {
	optional           bool
	mock               *DeployRepositoryMock
	defaultExpectation *DeployRepositoryMockDeployExpectation
	expectations       []*DeployRepositoryMockDeployExpectation

	callArgs []*DeployRepositoryMockDeployParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// DeployRepositoryMockDeployExpectation specifies expectation struct of the DeployRepository.Deploy
type DeployRepositoryMockDeployExpectation struct {
	mock      *DeployRepositoryMock
	params    *DeployRepositoryMockDeployParams
	paramPtrs *DeployRepositoryMockDeployParamPtrs
	results   *DeployRepositoryMockDeployResults
	Counter   uint64
}

// DeployRepositoryMockDeployParams contains parameters of the DeployRepository.Deploy
type DeployRepositoryMockDeployParams struct {
	ctx    context.Context
	deploy *model.Deploy
}

// DeployRepositoryMockDeployParamPtrs contains pointers to parameters of the DeployRepository.Deploy
type DeployRepositoryMockDeployParamPtrs struct {
	ctx    *context.Context
	deploy **model.Deploy
}

// DeployRepositoryMockDeployResults contains results of the DeployRepository.Deploy
type DeployRepositoryMockDeployResults struct {
	i1  int64
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option by default unless you really need it, as it helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmDeploy *mDeployRepositoryMockDeploy) Optional() *mDeployRepositoryMockDeploy {
	mmDeploy.optional = true
	return mmDeploy
}

// Expect sets up expected params for DeployRepository.Deploy
func (mmDeploy *mDeployRepositoryMockDeploy) Expect(ctx context.Context, deploy *model.Deploy) *mDeployRepositoryMockDeploy {
	if mmDeploy.mock.funcDeploy != nil {
		mmDeploy.mock.t.Fatalf("DeployRepositoryMock.Deploy mock is already set by Set")
	}

	if mmDeploy.defaultExpectation == nil {
		mmDeploy.defaultExpectation = &DeployRepositoryMockDeployExpectation{}
	}

	if mmDeploy.defaultExpectation.paramPtrs != nil {
		mmDeploy.mock.t.Fatalf("DeployRepositoryMock.Deploy mock is already set by ExpectParams functions")
	}

	mmDeploy.defaultExpectation.params = &DeployRepositoryMockDeployParams{ctx, deploy}
	for _, e := range mmDeploy.expectations {
		if minimock.Equal(e.params, mmDeploy.defaultExpectation.params) {
			mmDeploy.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmDeploy.defaultExpectation.params)
		}
	}

	return mmDeploy
}

// ExpectCtxParam1 sets up expected param ctx for DeployRepository.Deploy
func (mmDeploy *mDeployRepositoryMockDeploy) ExpectCtxParam1(ctx context.Context) *mDeployRepositoryMockDeploy {
	if mmDeploy.mock.funcDeploy != nil {
		mmDeploy.mock.t.Fatalf("DeployRepositoryMock.Deploy mock is already set by Set")
	}

	if mmDeploy.defaultExpectation == nil {
		mmDeploy.defaultExpectation = &DeployRepositoryMockDeployExpectation{}
	}

	if mmDeploy.defaultExpectation.params != nil {
		mmDeploy.mock.t.Fatalf("DeployRepositoryMock.Deploy mock is already set by Expect")
	}

	if mmDeploy.defaultExpectation.paramPtrs == nil {
		mmDeploy.defaultExpectation.paramPtrs = &DeployRepositoryMockDeployParamPtrs{}
	}
	mmDeploy.defaultExpectation.paramPtrs.ctx = &ctx

	return mmDeploy
}

// ExpectDeployParam2 sets up expected param deploy for DeployRepository.Deploy
func (mmDeploy *mDeployRepositoryMockDeploy) ExpectDeployParam2(deploy *model.Deploy) *mDeployRepositoryMockDeploy {
	if mmDeploy.mock.funcDeploy != nil {
		mmDeploy.mock.t.Fatalf("DeployRepositoryMock.Deploy mock is already set by Set")
	}

	if mmDeploy.defaultExpectation == nil {
		mmDeploy.defaultExpectation = &DeployRepositoryMockDeployExpectation{}
	}

	if mmDeploy.defaultExpectation.params != nil {
		mmDeploy.mock.t.Fatalf("DeployRepositoryMock.Deploy mock is already set by Expect")
	}

	if mmDeploy.defaultExpectation.paramPtrs == nil {
		mmDeploy.defaultExpectation.paramPtrs = &DeployRepositoryMockDeployParamPtrs{}
	}
	mmDeploy.defaultExpectation.paramPtrs.deploy = &deploy

	return mmDeploy
}

// Inspect accepts an inspector function that has same arguments as the DeployRepository.Deploy
func (mmDeploy *mDeployRepositoryMockDeploy) Inspect(f func(ctx context.Context, deploy *model.Deploy)) *mDeployRepositoryMockDeploy {
	if mmDeploy.mock.inspectFuncDeploy != nil {
		mmDeploy.mock.t.Fatalf("Inspect function is already set for DeployRepositoryMock.Deploy")
	}

	mmDeploy.mock.inspectFuncDeploy = f

	return mmDeploy
}

// Return sets up results that will be returned by DeployRepository.Deploy
func (mmDeploy *mDeployRepositoryMockDeploy) Return(i1 int64, err error) *DeployRepositoryMock {
	if mmDeploy.mock.funcDeploy != nil {
		mmDeploy.mock.t.Fatalf("DeployRepositoryMock.Deploy mock is already set by Set")
	}

	if mmDeploy.defaultExpectation == nil {
		mmDeploy.defaultExpectation = &DeployRepositoryMockDeployExpectation{mock: mmDeploy.mock}
	}
	mmDeploy.defaultExpectation.results = &DeployRepositoryMockDeployResults{i1, err}
	return mmDeploy.mock
}

// Set uses given function f to mock the DeployRepository.Deploy method
func (mmDeploy *mDeployRepositoryMockDeploy) Set(f func(ctx context.Context, deploy *model.Deploy) (i1 int64, err error)) *DeployRepositoryMock {
	if mmDeploy.defaultExpectation != nil {
		mmDeploy.mock.t.Fatalf("Default expectation is already set for the DeployRepository.Deploy method")
	}

	if len(mmDeploy.expectations) > 0 {
		mmDeploy.mock.t.Fatalf("Some expectations are already set for the DeployRepository.Deploy method")
	}

	mmDeploy.mock.funcDeploy = f
	return mmDeploy.mock
}

// When sets expectation for the DeployRepository.Deploy which will trigger the result defined by the following
// Then helper
func (mmDeploy *mDeployRepositoryMockDeploy) When(ctx context.Context, deploy *model.Deploy) *DeployRepositoryMockDeployExpectation {
	if mmDeploy.mock.funcDeploy != nil {
		mmDeploy.mock.t.Fatalf("DeployRepositoryMock.Deploy mock is already set by Set")
	}

	expectation := &DeployRepositoryMockDeployExpectation{
		mock:   mmDeploy.mock,
		params: &DeployRepositoryMockDeployParams{ctx, deploy},
	}
	mmDeploy.expectations = append(mmDeploy.expectations, expectation)
	return expectation
}

// Then sets up DeployRepository.Deploy return parameters for the expectation previously defined by the When method
func (e *DeployRepositoryMockDeployExpectation) Then(i1 int64, err error) *DeployRepositoryMock {
	e.results = &DeployRepositoryMockDeployResults{i1, err}
	return e.mock
}

// Times sets number of times DeployRepository.Deploy should be invoked
func (mmDeploy *mDeployRepositoryMockDeploy) Times(n uint64) *mDeployRepositoryMockDeploy {
	if n == 0 {
		mmDeploy.mock.t.Fatalf("Times of DeployRepositoryMock.Deploy mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmDeploy.expectedInvocations, n)
	return mmDeploy
}

func (mmDeploy *mDeployRepositoryMockDeploy) invocationsDone() bool {
	if len(mmDeploy.expectations) == 0 && mmDeploy.defaultExpectation == nil && mmDeploy.mock.funcDeploy == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmDeploy.mock.afterDeployCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmDeploy.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Deploy implements repository.DeployRepository
func (mmDeploy *DeployRepositoryMock) Deploy(ctx context.Context, deploy *model.Deploy) (i1 int64, err error) {
	mm_atomic.AddUint64(&mmDeploy.beforeDeployCounter, 1)
	defer mm_atomic.AddUint64(&mmDeploy.afterDeployCounter, 1)

	if mmDeploy.inspectFuncDeploy != nil {
		mmDeploy.inspectFuncDeploy(ctx, deploy)
	}

	mm_params := DeployRepositoryMockDeployParams{ctx, deploy}

	// Record call args
	mmDeploy.DeployMock.mutex.Lock()
	mmDeploy.DeployMock.callArgs = append(mmDeploy.DeployMock.callArgs, &mm_params)
	mmDeploy.DeployMock.mutex.Unlock()

	for _, e := range mmDeploy.DeployMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.i1, e.results.err
		}
	}

	if mmDeploy.DeployMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmDeploy.DeployMock.defaultExpectation.Counter, 1)
		mm_want := mmDeploy.DeployMock.defaultExpectation.params
		mm_want_ptrs := mmDeploy.DeployMock.defaultExpectation.paramPtrs

		mm_got := DeployRepositoryMockDeployParams{ctx, deploy}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmDeploy.t.Errorf("DeployRepositoryMock.Deploy got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.deploy != nil && !minimock.Equal(*mm_want_ptrs.deploy, mm_got.deploy) {
				mmDeploy.t.Errorf("DeployRepositoryMock.Deploy got unexpected parameter deploy, want: %#v, got: %#v%s\n", *mm_want_ptrs.deploy, mm_got.deploy, minimock.Diff(*mm_want_ptrs.deploy, mm_got.deploy))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmDeploy.t.Errorf("DeployRepositoryMock.Deploy got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmDeploy.DeployMock.defaultExpectation.results
		if mm_results == nil {
			mmDeploy.t.Fatal("No results are set for the DeployRepositoryMock.Deploy")
		}
		return (*mm_results).i1, (*mm_results).err
	}
	if mmDeploy.funcDeploy != nil {
		return mmDeploy.funcDeploy(ctx, deploy)
	}
	mmDeploy.t.Fatalf("Unexpected call to DeployRepositoryMock.Deploy. %v %v", ctx, deploy)
	return
}

// DeployAfterCounter returns a count of finished DeployRepositoryMock.Deploy invocations
func (mmDeploy *DeployRepositoryMock) DeployAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDeploy.afterDeployCounter)
}

// DeployBeforeCounter returns a count of DeployRepositoryMock.Deploy invocations
func (mmDeploy *DeployRepositoryMock) DeployBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDeploy.beforeDeployCounter)
}

// Calls returns a list of arguments used in each call to DeployRepositoryMock.Deploy.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmDeploy *mDeployRepositoryMockDeploy) Calls() []*DeployRepositoryMockDeployParams {
	mmDeploy.mutex.RLock()

	argCopy := make([]*DeployRepositoryMockDeployParams, len(mmDeploy.callArgs))
	copy(argCopy, mmDeploy.callArgs)

	mmDeploy.mutex.RUnlock()

	return argCopy
}

// MinimockDeployDone returns true if the count of the Deploy invocations corresponds
// the number of defined expectations
func (m *DeployRepositoryMock) MinimockDeployDone() bool {
	if m.DeployMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.DeployMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.DeployMock.invocationsDone()
}

// MinimockDeployInspect logs each unmet expectation
func (m *DeployRepositoryMock) MinimockDeployInspect() {
	for _, e := range m.DeployMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to DeployRepositoryMock.Deploy with params: %#v", *e.params)
		}
	}

	afterDeployCounter := mm_atomic.LoadUint64(&m.afterDeployCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.DeployMock.defaultExpectation != nil && afterDeployCounter < 1 {
		if m.DeployMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to DeployRepositoryMock.Deploy")
		} else {
			m.t.Errorf("Expected call to DeployRepositoryMock.Deploy with params: %#v", *m.DeployMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDeploy != nil && afterDeployCounter < 1 {
		m.t.Error("Expected call to DeployRepositoryMock.Deploy")
	}

	if !m.DeployMock.invocationsDone() && afterDeployCounter > 0 {
		m.t.Errorf("Expected %d calls to DeployRepositoryMock.Deploy but found %d calls",
			mm_atomic.LoadUint64(&m.DeployMock.expectedInvocations), afterDeployCounter)
	}
}

type mDeployRepositoryMockGet struct {
	optional           bool
	mock               *DeployRepositoryMock
	defaultExpectation *DeployRepositoryMockGetExpectation
	expectations       []*DeployRepositoryMockGetExpectation

	callArgs []*DeployRepositoryMockGetParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// DeployRepositoryMockGetExpectation specifies expectation struct of the DeployRepository.Get
type DeployRepositoryMockGetExpectation struct {
	mock      *DeployRepositoryMock
	params    *DeployRepositoryMockGetParams
	paramPtrs *DeployRepositoryMockGetParamPtrs
	results   *DeployRepositoryMockGetResults
	Counter   uint64
}

// DeployRepositoryMockGetParams contains parameters of the DeployRepository.Get
type DeployRepositoryMockGetParams struct {
	ctx context.Context
	id  int64
}

// DeployRepositoryMockGetParamPtrs contains pointers to parameters of the DeployRepository.Get
type DeployRepositoryMockGetParamPtrs struct {
	ctx *context.Context
	id  *int64
}

// DeployRepositoryMockGetResults contains results of the DeployRepository.Get
type DeployRepositoryMockGetResults struct {
	dp1 *model.Deploy
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option by default unless you really need it, as it helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGet *mDeployRepositoryMockGet) Optional() *mDeployRepositoryMockGet {
	mmGet.optional = true
	return mmGet
}

// Expect sets up expected params for DeployRepository.Get
func (mmGet *mDeployRepositoryMockGet) Expect(ctx context.Context, id int64) *mDeployRepositoryMockGet {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("DeployRepositoryMock.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &DeployRepositoryMockGetExpectation{}
	}

	if mmGet.defaultExpectation.paramPtrs != nil {
		mmGet.mock.t.Fatalf("DeployRepositoryMock.Get mock is already set by ExpectParams functions")
	}

	mmGet.defaultExpectation.params = &DeployRepositoryMockGetParams{ctx, id}
	for _, e := range mmGet.expectations {
		if minimock.Equal(e.params, mmGet.defaultExpectation.params) {
			mmGet.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGet.defaultExpectation.params)
		}
	}

	return mmGet
}

// ExpectCtxParam1 sets up expected param ctx for DeployRepository.Get
func (mmGet *mDeployRepositoryMockGet) ExpectCtxParam1(ctx context.Context) *mDeployRepositoryMockGet {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("DeployRepositoryMock.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &DeployRepositoryMockGetExpectation{}
	}

	if mmGet.defaultExpectation.params != nil {
		mmGet.mock.t.Fatalf("DeployRepositoryMock.Get mock is already set by Expect")
	}

	if mmGet.defaultExpectation.paramPtrs == nil {
		mmGet.defaultExpectation.paramPtrs = &DeployRepositoryMockGetParamPtrs{}
	}
	mmGet.defaultExpectation.paramPtrs.ctx = &ctx

	return mmGet
}

// ExpectIdParam2 sets up expected param id for DeployRepository.Get
func (mmGet *mDeployRepositoryMockGet) ExpectIdParam2(id int64) *mDeployRepositoryMockGet {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("DeployRepositoryMock.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &DeployRepositoryMockGetExpectation{}
	}

	if mmGet.defaultExpectation.params != nil {
		mmGet.mock.t.Fatalf("DeployRepositoryMock.Get mock is already set by Expect")
	}

	if mmGet.defaultExpectation.paramPtrs == nil {
		mmGet.defaultExpectation.paramPtrs = &DeployRepositoryMockGetParamPtrs{}
	}
	mmGet.defaultExpectation.paramPtrs.id = &id

	return mmGet
}

// Inspect accepts an inspector function that has same arguments as the DeployRepository.Get
func (mmGet *mDeployRepositoryMockGet) Inspect(f func(ctx context.Context, id int64)) *mDeployRepositoryMockGet {
	if mmGet.mock.inspectFuncGet != nil {
		mmGet.mock.t.Fatalf("Inspect function is already set for DeployRepositoryMock.Get")
	}

	mmGet.mock.inspectFuncGet = f

	return mmGet
}

// Return sets up results that will be returned by DeployRepository.Get
func (mmGet *mDeployRepositoryMockGet) Return(dp1 *model.Deploy, err error) *DeployRepositoryMock {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("DeployRepositoryMock.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &DeployRepositoryMockGetExpectation{mock: mmGet.mock}
	}
	mmGet.defaultExpectation.results = &DeployRepositoryMockGetResults{dp1, err}
	return mmGet.mock
}

// Set uses given function f to mock the DeployRepository.Get method
func (mmGet *mDeployRepositoryMockGet) Set(f func(ctx context.Context, id int64) (dp1 *model.Deploy, err error)) *DeployRepositoryMock {
	if mmGet.defaultExpectation != nil {
		mmGet.mock.t.Fatalf("Default expectation is already set for the DeployRepository.Get method")
	}

	if len(mmGet.expectations) > 0 {
		mmGet.mock.t.Fatalf("Some expectations are already set for the DeployRepository.Get method")
	}

	mmGet.mock.funcGet = f
	return mmGet.mock
}

// When sets expectation for the DeployRepository.Get which will trigger the result defined by the following
// Then helper
func (mmGet *mDeployRepositoryMockGet) When(ctx context.Context, id int64) *DeployRepositoryMockGetExpectation {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("DeployRepositoryMock.Get mock is already set by Set")
	}

	expectation := &DeployRepositoryMockGetExpectation{
		mock:   mmGet.mock,
		params: &DeployRepositoryMockGetParams{ctx, id},
	}
	mmGet.expectations = append(mmGet.expectations, expectation)
	return expectation
}

// Then sets up DeployRepository.Get return parameters for the expectation previously defined by the When method
func (e *DeployRepositoryMockGetExpectation) Then(dp1 *model.Deploy, err error) *DeployRepositoryMock {
	e.results = &DeployRepositoryMockGetResults{dp1, err}
	return e.mock
}

// Times sets number of times DeployRepository.Get should be invoked
func (mmGet *mDeployRepositoryMockGet) Times(n uint64) *mDeployRepositoryMockGet {
	if n == 0 {
		mmGet.mock.t.Fatalf("Times of DeployRepositoryMock.Get mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGet.expectedInvocations, n)
	return mmGet
}

func (mmGet *mDeployRepositoryMockGet) invocationsDone() bool {
	if len(mmGet.expectations) == 0 && mmGet.defaultExpectation == nil && mmGet.mock.funcGet == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGet.mock.afterGetCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGet.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Get implements repository.DeployRepository
func (mmGet *DeployRepositoryMock) Get(ctx context.Context, id int64) (dp1 *model.Deploy, err error) {
	mm_atomic.AddUint64(&mmGet.beforeGetCounter, 1)
	defer mm_atomic.AddUint64(&mmGet.afterGetCounter, 1)

	if mmGet.inspectFuncGet != nil {
		mmGet.inspectFuncGet(ctx, id)
	}

	mm_params := DeployRepositoryMockGetParams{ctx, id}

	// Record call args
	mmGet.GetMock.mutex.Lock()
	mmGet.GetMock.callArgs = append(mmGet.GetMock.callArgs, &mm_params)
	mmGet.GetMock.mutex.Unlock()

	for _, e := range mmGet.GetMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.dp1, e.results.err
		}
	}

	if mmGet.GetMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGet.GetMock.defaultExpectation.Counter, 1)
		mm_want := mmGet.GetMock.defaultExpectation.params
		mm_want_ptrs := mmGet.GetMock.defaultExpectation.paramPtrs

		mm_got := DeployRepositoryMockGetParams{ctx, id}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGet.t.Errorf("DeployRepositoryMock.Get got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.id != nil && !minimock.Equal(*mm_want_ptrs.id, mm_got.id) {
				mmGet.t.Errorf("DeployRepositoryMock.Get got unexpected parameter id, want: %#v, got: %#v%s\n", *mm_want_ptrs.id, mm_got.id, minimock.Diff(*mm_want_ptrs.id, mm_got.id))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGet.t.Errorf("DeployRepositoryMock.Get got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGet.GetMock.defaultExpectation.results
		if mm_results == nil {
			mmGet.t.Fatal("No results are set for the DeployRepositoryMock.Get")
		}
		return (*mm_results).dp1, (*mm_results).err
	}
	if mmGet.funcGet != nil {
		return mmGet.funcGet(ctx, id)
	}
	mmGet.t.Fatalf("Unexpected call to DeployRepositoryMock.Get. %v %v", ctx, id)
	return
}

// GetAfterCounter returns a count of finished DeployRepositoryMock.Get invocations
func (mmGet *DeployRepositoryMock) GetAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGet.afterGetCounter)
}

// GetBeforeCounter returns a count of DeployRepositoryMock.Get invocations
func (mmGet *DeployRepositoryMock) GetBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGet.beforeGetCounter)
}

// Calls returns a list of arguments used in each call to DeployRepositoryMock.Get.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGet *mDeployRepositoryMockGet) Calls() []*DeployRepositoryMockGetParams {
	mmGet.mutex.RLock()

	argCopy := make([]*DeployRepositoryMockGetParams, len(mmGet.callArgs))
	copy(argCopy, mmGet.callArgs)

	mmGet.mutex.RUnlock()

	return argCopy
}

// MinimockGetDone returns true if the count of the Get invocations corresponds
// the number of defined expectations
func (m *DeployRepositoryMock) MinimockGetDone() bool {
	if m.GetMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetMock.invocationsDone()
}

// MinimockGetInspect logs each unmet expectation
func (m *DeployRepositoryMock) MinimockGetInspect() {
	for _, e := range m.GetMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to DeployRepositoryMock.Get with params: %#v", *e.params)
		}
	}

	afterGetCounter := mm_atomic.LoadUint64(&m.afterGetCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetMock.defaultExpectation != nil && afterGetCounter < 1 {
		if m.GetMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to DeployRepositoryMock.Get")
		} else {
			m.t.Errorf("Expected call to DeployRepositoryMock.Get with params: %#v", *m.GetMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGet != nil && afterGetCounter < 1 {
		m.t.Error("Expected call to DeployRepositoryMock.Get")
	}

	if !m.GetMock.invocationsDone() && afterGetCounter > 0 {
		m.t.Errorf("Expected %d calls to DeployRepositoryMock.Get but found %d calls",
			mm_atomic.LoadUint64(&m.GetMock.expectedInvocations), afterGetCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *DeployRepositoryMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockDeployInspect()

			m.MinimockGetInspect()
			m.t.FailNow()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *DeployRepositoryMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *DeployRepositoryMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockDeployDone() &&
		m.MinimockGetDone()
}
