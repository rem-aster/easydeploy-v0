// Code generated by http://github.com/gojuno/minimock (v3.3.10). DO NOT EDIT.

package mocks

//go:generate minimock -i gitlab.crja72.ru/gospec/go16/easydeploy/backend/internal/repository.DeployRepository -o deploy_repository_minimock.go -n DeployRepositoryMock -p mocks

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"gitlab.crja72.ru/gospec/go16/easydeploy/backend/internal/model"
)

// DeployRepositoryMock implements repository.DeployRepository
type DeployRepositoryMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcDeploy          func(ctx context.Context, deploy *model.Deploy) (i1 int64, err error)
	inspectFuncDeploy   func(ctx context.Context, deploy *model.Deploy)
	afterDeployCounter  uint64
	beforeDeployCounter uint64
	DeployMock          mDeployRepositoryMockDeploy

	funcDeployStatus          func(ctx context.Context) (err error)
	inspectFuncDeployStatus   func(ctx context.Context)
	afterDeployStatusCounter  uint64
	beforeDeployStatusCounter uint64
	DeployStatusMock          mDeployRepositoryMockDeployStatus
}

// NewDeployRepositoryMock returns a mock for repository.DeployRepository
func NewDeployRepositoryMock(t minimock.Tester) *DeployRepositoryMock {
	m := &DeployRepositoryMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.DeployMock = mDeployRepositoryMockDeploy{mock: m}
	m.DeployMock.callArgs = []*DeployRepositoryMockDeployParams{}

	m.DeployStatusMock = mDeployRepositoryMockDeployStatus{mock: m}
	m.DeployStatusMock.callArgs = []*DeployRepositoryMockDeployStatusParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mDeployRepositoryMockDeploy struct {
	optional           bool
	mock               *DeployRepositoryMock
	defaultExpectation *DeployRepositoryMockDeployExpectation
	expectations       []*DeployRepositoryMockDeployExpectation

	callArgs []*DeployRepositoryMockDeployParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// DeployRepositoryMockDeployExpectation specifies expectation struct of the DeployRepository.Deploy
type DeployRepositoryMockDeployExpectation struct {
	mock      *DeployRepositoryMock
	params    *DeployRepositoryMockDeployParams
	paramPtrs *DeployRepositoryMockDeployParamPtrs
	results   *DeployRepositoryMockDeployResults
	Counter   uint64
}

// DeployRepositoryMockDeployParams contains parameters of the DeployRepository.Deploy
type DeployRepositoryMockDeployParams struct {
	ctx    context.Context
	deploy *model.Deploy
}

// DeployRepositoryMockDeployParamPtrs contains pointers to parameters of the DeployRepository.Deploy
type DeployRepositoryMockDeployParamPtrs struct {
	ctx    *context.Context
	deploy **model.Deploy
}

// DeployRepositoryMockDeployResults contains results of the DeployRepository.Deploy
type DeployRepositoryMockDeployResults struct {
	i1  int64
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option by default unless you really need it, as it helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmDeploy *mDeployRepositoryMockDeploy) Optional() *mDeployRepositoryMockDeploy {
	mmDeploy.optional = true
	return mmDeploy
}

// Expect sets up expected params for DeployRepository.Deploy
func (mmDeploy *mDeployRepositoryMockDeploy) Expect(ctx context.Context, deploy *model.Deploy) *mDeployRepositoryMockDeploy {
	if mmDeploy.mock.funcDeploy != nil {
		mmDeploy.mock.t.Fatalf("DeployRepositoryMock.Deploy mock is already set by Set")
	}

	if mmDeploy.defaultExpectation == nil {
		mmDeploy.defaultExpectation = &DeployRepositoryMockDeployExpectation{}
	}

	if mmDeploy.defaultExpectation.paramPtrs != nil {
		mmDeploy.mock.t.Fatalf("DeployRepositoryMock.Deploy mock is already set by ExpectParams functions")
	}

	mmDeploy.defaultExpectation.params = &DeployRepositoryMockDeployParams{ctx, deploy}
	for _, e := range mmDeploy.expectations {
		if minimock.Equal(e.params, mmDeploy.defaultExpectation.params) {
			mmDeploy.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmDeploy.defaultExpectation.params)
		}
	}

	return mmDeploy
}

// ExpectCtxParam1 sets up expected param ctx for DeployRepository.Deploy
func (mmDeploy *mDeployRepositoryMockDeploy) ExpectCtxParam1(ctx context.Context) *mDeployRepositoryMockDeploy {
	if mmDeploy.mock.funcDeploy != nil {
		mmDeploy.mock.t.Fatalf("DeployRepositoryMock.Deploy mock is already set by Set")
	}

	if mmDeploy.defaultExpectation == nil {
		mmDeploy.defaultExpectation = &DeployRepositoryMockDeployExpectation{}
	}

	if mmDeploy.defaultExpectation.params != nil {
		mmDeploy.mock.t.Fatalf("DeployRepositoryMock.Deploy mock is already set by Expect")
	}

	if mmDeploy.defaultExpectation.paramPtrs == nil {
		mmDeploy.defaultExpectation.paramPtrs = &DeployRepositoryMockDeployParamPtrs{}
	}
	mmDeploy.defaultExpectation.paramPtrs.ctx = &ctx

	return mmDeploy
}

// ExpectDeployParam2 sets up expected param deploy for DeployRepository.Deploy
func (mmDeploy *mDeployRepositoryMockDeploy) ExpectDeployParam2(deploy *model.Deploy) *mDeployRepositoryMockDeploy {
	if mmDeploy.mock.funcDeploy != nil {
		mmDeploy.mock.t.Fatalf("DeployRepositoryMock.Deploy mock is already set by Set")
	}

	if mmDeploy.defaultExpectation == nil {
		mmDeploy.defaultExpectation = &DeployRepositoryMockDeployExpectation{}
	}

	if mmDeploy.defaultExpectation.params != nil {
		mmDeploy.mock.t.Fatalf("DeployRepositoryMock.Deploy mock is already set by Expect")
	}

	if mmDeploy.defaultExpectation.paramPtrs == nil {
		mmDeploy.defaultExpectation.paramPtrs = &DeployRepositoryMockDeployParamPtrs{}
	}
	mmDeploy.defaultExpectation.paramPtrs.deploy = &deploy

	return mmDeploy
}

// Inspect accepts an inspector function that has same arguments as the DeployRepository.Deploy
func (mmDeploy *mDeployRepositoryMockDeploy) Inspect(f func(ctx context.Context, deploy *model.Deploy)) *mDeployRepositoryMockDeploy {
	if mmDeploy.mock.inspectFuncDeploy != nil {
		mmDeploy.mock.t.Fatalf("Inspect function is already set for DeployRepositoryMock.Deploy")
	}

	mmDeploy.mock.inspectFuncDeploy = f

	return mmDeploy
}

// Return sets up results that will be returned by DeployRepository.Deploy
func (mmDeploy *mDeployRepositoryMockDeploy) Return(i1 int64, err error) *DeployRepositoryMock {
	if mmDeploy.mock.funcDeploy != nil {
		mmDeploy.mock.t.Fatalf("DeployRepositoryMock.Deploy mock is already set by Set")
	}

	if mmDeploy.defaultExpectation == nil {
		mmDeploy.defaultExpectation = &DeployRepositoryMockDeployExpectation{mock: mmDeploy.mock}
	}
	mmDeploy.defaultExpectation.results = &DeployRepositoryMockDeployResults{i1, err}
	return mmDeploy.mock
}

// Set uses given function f to mock the DeployRepository.Deploy method
func (mmDeploy *mDeployRepositoryMockDeploy) Set(f func(ctx context.Context, deploy *model.Deploy) (i1 int64, err error)) *DeployRepositoryMock {
	if mmDeploy.defaultExpectation != nil {
		mmDeploy.mock.t.Fatalf("Default expectation is already set for the DeployRepository.Deploy method")
	}

	if len(mmDeploy.expectations) > 0 {
		mmDeploy.mock.t.Fatalf("Some expectations are already set for the DeployRepository.Deploy method")
	}

	mmDeploy.mock.funcDeploy = f
	return mmDeploy.mock
}

// When sets expectation for the DeployRepository.Deploy which will trigger the result defined by the following
// Then helper
func (mmDeploy *mDeployRepositoryMockDeploy) When(ctx context.Context, deploy *model.Deploy) *DeployRepositoryMockDeployExpectation {
	if mmDeploy.mock.funcDeploy != nil {
		mmDeploy.mock.t.Fatalf("DeployRepositoryMock.Deploy mock is already set by Set")
	}

	expectation := &DeployRepositoryMockDeployExpectation{
		mock:   mmDeploy.mock,
		params: &DeployRepositoryMockDeployParams{ctx, deploy},
	}
	mmDeploy.expectations = append(mmDeploy.expectations, expectation)
	return expectation
}

// Then sets up DeployRepository.Deploy return parameters for the expectation previously defined by the When method
func (e *DeployRepositoryMockDeployExpectation) Then(i1 int64, err error) *DeployRepositoryMock {
	e.results = &DeployRepositoryMockDeployResults{i1, err}
	return e.mock
}

// Times sets number of times DeployRepository.Deploy should be invoked
func (mmDeploy *mDeployRepositoryMockDeploy) Times(n uint64) *mDeployRepositoryMockDeploy {
	if n == 0 {
		mmDeploy.mock.t.Fatalf("Times of DeployRepositoryMock.Deploy mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmDeploy.expectedInvocations, n)
	return mmDeploy
}

func (mmDeploy *mDeployRepositoryMockDeploy) invocationsDone() bool {
	if len(mmDeploy.expectations) == 0 && mmDeploy.defaultExpectation == nil && mmDeploy.mock.funcDeploy == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmDeploy.mock.afterDeployCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmDeploy.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Deploy implements repository.DeployRepository
func (mmDeploy *DeployRepositoryMock) Deploy(ctx context.Context, deploy *model.Deploy) (i1 int64, err error) {
	mm_atomic.AddUint64(&mmDeploy.beforeDeployCounter, 1)
	defer mm_atomic.AddUint64(&mmDeploy.afterDeployCounter, 1)

	if mmDeploy.inspectFuncDeploy != nil {
		mmDeploy.inspectFuncDeploy(ctx, deploy)
	}

	mm_params := DeployRepositoryMockDeployParams{ctx, deploy}

	// Record call args
	mmDeploy.DeployMock.mutex.Lock()
	mmDeploy.DeployMock.callArgs = append(mmDeploy.DeployMock.callArgs, &mm_params)
	mmDeploy.DeployMock.mutex.Unlock()

	for _, e := range mmDeploy.DeployMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.i1, e.results.err
		}
	}

	if mmDeploy.DeployMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmDeploy.DeployMock.defaultExpectation.Counter, 1)
		mm_want := mmDeploy.DeployMock.defaultExpectation.params
		mm_want_ptrs := mmDeploy.DeployMock.defaultExpectation.paramPtrs

		mm_got := DeployRepositoryMockDeployParams{ctx, deploy}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmDeploy.t.Errorf("DeployRepositoryMock.Deploy got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.deploy != nil && !minimock.Equal(*mm_want_ptrs.deploy, mm_got.deploy) {
				mmDeploy.t.Errorf("DeployRepositoryMock.Deploy got unexpected parameter deploy, want: %#v, got: %#v%s\n", *mm_want_ptrs.deploy, mm_got.deploy, minimock.Diff(*mm_want_ptrs.deploy, mm_got.deploy))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmDeploy.t.Errorf("DeployRepositoryMock.Deploy got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmDeploy.DeployMock.defaultExpectation.results
		if mm_results == nil {
			mmDeploy.t.Fatal("No results are set for the DeployRepositoryMock.Deploy")
		}
		return (*mm_results).i1, (*mm_results).err
	}
	if mmDeploy.funcDeploy != nil {
		return mmDeploy.funcDeploy(ctx, deploy)
	}
	mmDeploy.t.Fatalf("Unexpected call to DeployRepositoryMock.Deploy. %v %v", ctx, deploy)
	return
}

// DeployAfterCounter returns a count of finished DeployRepositoryMock.Deploy invocations
func (mmDeploy *DeployRepositoryMock) DeployAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDeploy.afterDeployCounter)
}

// DeployBeforeCounter returns a count of DeployRepositoryMock.Deploy invocations
func (mmDeploy *DeployRepositoryMock) DeployBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDeploy.beforeDeployCounter)
}

// Calls returns a list of arguments used in each call to DeployRepositoryMock.Deploy.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmDeploy *mDeployRepositoryMockDeploy) Calls() []*DeployRepositoryMockDeployParams {
	mmDeploy.mutex.RLock()

	argCopy := make([]*DeployRepositoryMockDeployParams, len(mmDeploy.callArgs))
	copy(argCopy, mmDeploy.callArgs)

	mmDeploy.mutex.RUnlock()

	return argCopy
}

// MinimockDeployDone returns true if the count of the Deploy invocations corresponds
// the number of defined expectations
func (m *DeployRepositoryMock) MinimockDeployDone() bool {
	if m.DeployMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.DeployMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.DeployMock.invocationsDone()
}

// MinimockDeployInspect logs each unmet expectation
func (m *DeployRepositoryMock) MinimockDeployInspect() {
	for _, e := range m.DeployMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to DeployRepositoryMock.Deploy with params: %#v", *e.params)
		}
	}

	afterDeployCounter := mm_atomic.LoadUint64(&m.afterDeployCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.DeployMock.defaultExpectation != nil && afterDeployCounter < 1 {
		if m.DeployMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to DeployRepositoryMock.Deploy")
		} else {
			m.t.Errorf("Expected call to DeployRepositoryMock.Deploy with params: %#v", *m.DeployMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDeploy != nil && afterDeployCounter < 1 {
		m.t.Error("Expected call to DeployRepositoryMock.Deploy")
	}

	if !m.DeployMock.invocationsDone() && afterDeployCounter > 0 {
		m.t.Errorf("Expected %d calls to DeployRepositoryMock.Deploy but found %d calls",
			mm_atomic.LoadUint64(&m.DeployMock.expectedInvocations), afterDeployCounter)
	}
}

type mDeployRepositoryMockDeployStatus struct {
	optional           bool
	mock               *DeployRepositoryMock
	defaultExpectation *DeployRepositoryMockDeployStatusExpectation
	expectations       []*DeployRepositoryMockDeployStatusExpectation

	callArgs []*DeployRepositoryMockDeployStatusParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// DeployRepositoryMockDeployStatusExpectation specifies expectation struct of the DeployRepository.DeployStatus
type DeployRepositoryMockDeployStatusExpectation struct {
	mock      *DeployRepositoryMock
	params    *DeployRepositoryMockDeployStatusParams
	paramPtrs *DeployRepositoryMockDeployStatusParamPtrs
	results   *DeployRepositoryMockDeployStatusResults
	Counter   uint64
}

// DeployRepositoryMockDeployStatusParams contains parameters of the DeployRepository.DeployStatus
type DeployRepositoryMockDeployStatusParams struct {
	ctx context.Context
}

// DeployRepositoryMockDeployStatusParamPtrs contains pointers to parameters of the DeployRepository.DeployStatus
type DeployRepositoryMockDeployStatusParamPtrs struct {
	ctx *context.Context
}

// DeployRepositoryMockDeployStatusResults contains results of the DeployRepository.DeployStatus
type DeployRepositoryMockDeployStatusResults struct {
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option by default unless you really need it, as it helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmDeployStatus *mDeployRepositoryMockDeployStatus) Optional() *mDeployRepositoryMockDeployStatus {
	mmDeployStatus.optional = true
	return mmDeployStatus
}

// Expect sets up expected params for DeployRepository.DeployStatus
func (mmDeployStatus *mDeployRepositoryMockDeployStatus) Expect(ctx context.Context) *mDeployRepositoryMockDeployStatus {
	if mmDeployStatus.mock.funcDeployStatus != nil {
		mmDeployStatus.mock.t.Fatalf("DeployRepositoryMock.DeployStatus mock is already set by Set")
	}

	if mmDeployStatus.defaultExpectation == nil {
		mmDeployStatus.defaultExpectation = &DeployRepositoryMockDeployStatusExpectation{}
	}

	if mmDeployStatus.defaultExpectation.paramPtrs != nil {
		mmDeployStatus.mock.t.Fatalf("DeployRepositoryMock.DeployStatus mock is already set by ExpectParams functions")
	}

	mmDeployStatus.defaultExpectation.params = &DeployRepositoryMockDeployStatusParams{ctx}
	for _, e := range mmDeployStatus.expectations {
		if minimock.Equal(e.params, mmDeployStatus.defaultExpectation.params) {
			mmDeployStatus.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmDeployStatus.defaultExpectation.params)
		}
	}

	return mmDeployStatus
}

// ExpectCtxParam1 sets up expected param ctx for DeployRepository.DeployStatus
func (mmDeployStatus *mDeployRepositoryMockDeployStatus) ExpectCtxParam1(ctx context.Context) *mDeployRepositoryMockDeployStatus {
	if mmDeployStatus.mock.funcDeployStatus != nil {
		mmDeployStatus.mock.t.Fatalf("DeployRepositoryMock.DeployStatus mock is already set by Set")
	}

	if mmDeployStatus.defaultExpectation == nil {
		mmDeployStatus.defaultExpectation = &DeployRepositoryMockDeployStatusExpectation{}
	}

	if mmDeployStatus.defaultExpectation.params != nil {
		mmDeployStatus.mock.t.Fatalf("DeployRepositoryMock.DeployStatus mock is already set by Expect")
	}

	if mmDeployStatus.defaultExpectation.paramPtrs == nil {
		mmDeployStatus.defaultExpectation.paramPtrs = &DeployRepositoryMockDeployStatusParamPtrs{}
	}
	mmDeployStatus.defaultExpectation.paramPtrs.ctx = &ctx

	return mmDeployStatus
}

// Inspect accepts an inspector function that has same arguments as the DeployRepository.DeployStatus
func (mmDeployStatus *mDeployRepositoryMockDeployStatus) Inspect(f func(ctx context.Context)) *mDeployRepositoryMockDeployStatus {
	if mmDeployStatus.mock.inspectFuncDeployStatus != nil {
		mmDeployStatus.mock.t.Fatalf("Inspect function is already set for DeployRepositoryMock.DeployStatus")
	}

	mmDeployStatus.mock.inspectFuncDeployStatus = f

	return mmDeployStatus
}

// Return sets up results that will be returned by DeployRepository.DeployStatus
func (mmDeployStatus *mDeployRepositoryMockDeployStatus) Return(err error) *DeployRepositoryMock {
	if mmDeployStatus.mock.funcDeployStatus != nil {
		mmDeployStatus.mock.t.Fatalf("DeployRepositoryMock.DeployStatus mock is already set by Set")
	}

	if mmDeployStatus.defaultExpectation == nil {
		mmDeployStatus.defaultExpectation = &DeployRepositoryMockDeployStatusExpectation{mock: mmDeployStatus.mock}
	}
	mmDeployStatus.defaultExpectation.results = &DeployRepositoryMockDeployStatusResults{err}
	return mmDeployStatus.mock
}

// Set uses given function f to mock the DeployRepository.DeployStatus method
func (mmDeployStatus *mDeployRepositoryMockDeployStatus) Set(f func(ctx context.Context) (err error)) *DeployRepositoryMock {
	if mmDeployStatus.defaultExpectation != nil {
		mmDeployStatus.mock.t.Fatalf("Default expectation is already set for the DeployRepository.DeployStatus method")
	}

	if len(mmDeployStatus.expectations) > 0 {
		mmDeployStatus.mock.t.Fatalf("Some expectations are already set for the DeployRepository.DeployStatus method")
	}

	mmDeployStatus.mock.funcDeployStatus = f
	return mmDeployStatus.mock
}

// When sets expectation for the DeployRepository.DeployStatus which will trigger the result defined by the following
// Then helper
func (mmDeployStatus *mDeployRepositoryMockDeployStatus) When(ctx context.Context) *DeployRepositoryMockDeployStatusExpectation {
	if mmDeployStatus.mock.funcDeployStatus != nil {
		mmDeployStatus.mock.t.Fatalf("DeployRepositoryMock.DeployStatus mock is already set by Set")
	}

	expectation := &DeployRepositoryMockDeployStatusExpectation{
		mock:   mmDeployStatus.mock,
		params: &DeployRepositoryMockDeployStatusParams{ctx},
	}
	mmDeployStatus.expectations = append(mmDeployStatus.expectations, expectation)
	return expectation
}

// Then sets up DeployRepository.DeployStatus return parameters for the expectation previously defined by the When method
func (e *DeployRepositoryMockDeployStatusExpectation) Then(err error) *DeployRepositoryMock {
	e.results = &DeployRepositoryMockDeployStatusResults{err}
	return e.mock
}

// Times sets number of times DeployRepository.DeployStatus should be invoked
func (mmDeployStatus *mDeployRepositoryMockDeployStatus) Times(n uint64) *mDeployRepositoryMockDeployStatus {
	if n == 0 {
		mmDeployStatus.mock.t.Fatalf("Times of DeployRepositoryMock.DeployStatus mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmDeployStatus.expectedInvocations, n)
	return mmDeployStatus
}

func (mmDeployStatus *mDeployRepositoryMockDeployStatus) invocationsDone() bool {
	if len(mmDeployStatus.expectations) == 0 && mmDeployStatus.defaultExpectation == nil && mmDeployStatus.mock.funcDeployStatus == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmDeployStatus.mock.afterDeployStatusCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmDeployStatus.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// DeployStatus implements repository.DeployRepository
func (mmDeployStatus *DeployRepositoryMock) DeployStatus(ctx context.Context) (err error) {
	mm_atomic.AddUint64(&mmDeployStatus.beforeDeployStatusCounter, 1)
	defer mm_atomic.AddUint64(&mmDeployStatus.afterDeployStatusCounter, 1)

	if mmDeployStatus.inspectFuncDeployStatus != nil {
		mmDeployStatus.inspectFuncDeployStatus(ctx)
	}

	mm_params := DeployRepositoryMockDeployStatusParams{ctx}

	// Record call args
	mmDeployStatus.DeployStatusMock.mutex.Lock()
	mmDeployStatus.DeployStatusMock.callArgs = append(mmDeployStatus.DeployStatusMock.callArgs, &mm_params)
	mmDeployStatus.DeployStatusMock.mutex.Unlock()

	for _, e := range mmDeployStatus.DeployStatusMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmDeployStatus.DeployStatusMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmDeployStatus.DeployStatusMock.defaultExpectation.Counter, 1)
		mm_want := mmDeployStatus.DeployStatusMock.defaultExpectation.params
		mm_want_ptrs := mmDeployStatus.DeployStatusMock.defaultExpectation.paramPtrs

		mm_got := DeployRepositoryMockDeployStatusParams{ctx}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmDeployStatus.t.Errorf("DeployRepositoryMock.DeployStatus got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmDeployStatus.t.Errorf("DeployRepositoryMock.DeployStatus got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmDeployStatus.DeployStatusMock.defaultExpectation.results
		if mm_results == nil {
			mmDeployStatus.t.Fatal("No results are set for the DeployRepositoryMock.DeployStatus")
		}
		return (*mm_results).err
	}
	if mmDeployStatus.funcDeployStatus != nil {
		return mmDeployStatus.funcDeployStatus(ctx)
	}
	mmDeployStatus.t.Fatalf("Unexpected call to DeployRepositoryMock.DeployStatus. %v", ctx)
	return
}

// DeployStatusAfterCounter returns a count of finished DeployRepositoryMock.DeployStatus invocations
func (mmDeployStatus *DeployRepositoryMock) DeployStatusAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDeployStatus.afterDeployStatusCounter)
}

// DeployStatusBeforeCounter returns a count of DeployRepositoryMock.DeployStatus invocations
func (mmDeployStatus *DeployRepositoryMock) DeployStatusBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDeployStatus.beforeDeployStatusCounter)
}

// Calls returns a list of arguments used in each call to DeployRepositoryMock.DeployStatus.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmDeployStatus *mDeployRepositoryMockDeployStatus) Calls() []*DeployRepositoryMockDeployStatusParams {
	mmDeployStatus.mutex.RLock()

	argCopy := make([]*DeployRepositoryMockDeployStatusParams, len(mmDeployStatus.callArgs))
	copy(argCopy, mmDeployStatus.callArgs)

	mmDeployStatus.mutex.RUnlock()

	return argCopy
}

// MinimockDeployStatusDone returns true if the count of the DeployStatus invocations corresponds
// the number of defined expectations
func (m *DeployRepositoryMock) MinimockDeployStatusDone() bool {
	if m.DeployStatusMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.DeployStatusMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.DeployStatusMock.invocationsDone()
}

// MinimockDeployStatusInspect logs each unmet expectation
func (m *DeployRepositoryMock) MinimockDeployStatusInspect() {
	for _, e := range m.DeployStatusMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to DeployRepositoryMock.DeployStatus with params: %#v", *e.params)
		}
	}

	afterDeployStatusCounter := mm_atomic.LoadUint64(&m.afterDeployStatusCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.DeployStatusMock.defaultExpectation != nil && afterDeployStatusCounter < 1 {
		if m.DeployStatusMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to DeployRepositoryMock.DeployStatus")
		} else {
			m.t.Errorf("Expected call to DeployRepositoryMock.DeployStatus with params: %#v", *m.DeployStatusMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDeployStatus != nil && afterDeployStatusCounter < 1 {
		m.t.Error("Expected call to DeployRepositoryMock.DeployStatus")
	}

	if !m.DeployStatusMock.invocationsDone() && afterDeployStatusCounter > 0 {
		m.t.Errorf("Expected %d calls to DeployRepositoryMock.DeployStatus but found %d calls",
			mm_atomic.LoadUint64(&m.DeployStatusMock.expectedInvocations), afterDeployStatusCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *DeployRepositoryMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockDeployInspect()

			m.MinimockDeployStatusInspect()
			m.t.FailNow()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *DeployRepositoryMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *DeployRepositoryMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockDeployDone() &&
		m.MinimockDeployStatusDone()
}
