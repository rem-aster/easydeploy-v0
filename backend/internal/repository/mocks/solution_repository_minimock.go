// Code generated by http://github.com/gojuno/minimock (v3.3.10). DO NOT EDIT.

package mocks

//go:generate minimock -i gitlab.crja72.ru/gospec/go16/easydeploy/backend/internal/repository.SolutionRepository -o solution_repository_minimock.go -n SolutionRepositoryMock -p mocks

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"gitlab.crja72.ru/gospec/go16/easydeploy/backend/internal/model"
)

// SolutionRepositoryMock implements repository.SolutionRepository
type SolutionRepositoryMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcDeploy          func(ctx context.Context) (err error)
	inspectFuncDeploy   func(ctx context.Context)
	afterDeployCounter  uint64
	beforeDeployCounter uint64
	DeployMock          mSolutionRepositoryMockDeploy

	funcList          func(ctx context.Context) (spa1 []*model.Solution, err error)
	inspectFuncList   func(ctx context.Context)
	afterListCounter  uint64
	beforeListCounter uint64
	ListMock          mSolutionRepositoryMockList

	funcStatus          func(ctx context.Context) (err error)
	inspectFuncStatus   func(ctx context.Context)
	afterStatusCounter  uint64
	beforeStatusCounter uint64
	StatusMock          mSolutionRepositoryMockStatus
}

// NewSolutionRepositoryMock returns a mock for repository.SolutionRepository
func NewSolutionRepositoryMock(t minimock.Tester) *SolutionRepositoryMock {
	m := &SolutionRepositoryMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.DeployMock = mSolutionRepositoryMockDeploy{mock: m}
	m.DeployMock.callArgs = []*SolutionRepositoryMockDeployParams{}

	m.ListMock = mSolutionRepositoryMockList{mock: m}
	m.ListMock.callArgs = []*SolutionRepositoryMockListParams{}

	m.StatusMock = mSolutionRepositoryMockStatus{mock: m}
	m.StatusMock.callArgs = []*SolutionRepositoryMockStatusParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mSolutionRepositoryMockDeploy struct {
	optional           bool
	mock               *SolutionRepositoryMock
	defaultExpectation *SolutionRepositoryMockDeployExpectation
	expectations       []*SolutionRepositoryMockDeployExpectation

	callArgs []*SolutionRepositoryMockDeployParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// SolutionRepositoryMockDeployExpectation specifies expectation struct of the SolutionRepository.Deploy
type SolutionRepositoryMockDeployExpectation struct {
	mock      *SolutionRepositoryMock
	params    *SolutionRepositoryMockDeployParams
	paramPtrs *SolutionRepositoryMockDeployParamPtrs
	results   *SolutionRepositoryMockDeployResults
	Counter   uint64
}

// SolutionRepositoryMockDeployParams contains parameters of the SolutionRepository.Deploy
type SolutionRepositoryMockDeployParams struct {
	ctx context.Context
}

// SolutionRepositoryMockDeployParamPtrs contains pointers to parameters of the SolutionRepository.Deploy
type SolutionRepositoryMockDeployParamPtrs struct {
	ctx *context.Context
}

// SolutionRepositoryMockDeployResults contains results of the SolutionRepository.Deploy
type SolutionRepositoryMockDeployResults struct {
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option by default unless you really need it, as it helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmDeploy *mSolutionRepositoryMockDeploy) Optional() *mSolutionRepositoryMockDeploy {
	mmDeploy.optional = true
	return mmDeploy
}

// Expect sets up expected params for SolutionRepository.Deploy
func (mmDeploy *mSolutionRepositoryMockDeploy) Expect(ctx context.Context) *mSolutionRepositoryMockDeploy {
	if mmDeploy.mock.funcDeploy != nil {
		mmDeploy.mock.t.Fatalf("SolutionRepositoryMock.Deploy mock is already set by Set")
	}

	if mmDeploy.defaultExpectation == nil {
		mmDeploy.defaultExpectation = &SolutionRepositoryMockDeployExpectation{}
	}

	if mmDeploy.defaultExpectation.paramPtrs != nil {
		mmDeploy.mock.t.Fatalf("SolutionRepositoryMock.Deploy mock is already set by ExpectParams functions")
	}

	mmDeploy.defaultExpectation.params = &SolutionRepositoryMockDeployParams{ctx}
	for _, e := range mmDeploy.expectations {
		if minimock.Equal(e.params, mmDeploy.defaultExpectation.params) {
			mmDeploy.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmDeploy.defaultExpectation.params)
		}
	}

	return mmDeploy
}

// ExpectCtxParam1 sets up expected param ctx for SolutionRepository.Deploy
func (mmDeploy *mSolutionRepositoryMockDeploy) ExpectCtxParam1(ctx context.Context) *mSolutionRepositoryMockDeploy {
	if mmDeploy.mock.funcDeploy != nil {
		mmDeploy.mock.t.Fatalf("SolutionRepositoryMock.Deploy mock is already set by Set")
	}

	if mmDeploy.defaultExpectation == nil {
		mmDeploy.defaultExpectation = &SolutionRepositoryMockDeployExpectation{}
	}

	if mmDeploy.defaultExpectation.params != nil {
		mmDeploy.mock.t.Fatalf("SolutionRepositoryMock.Deploy mock is already set by Expect")
	}

	if mmDeploy.defaultExpectation.paramPtrs == nil {
		mmDeploy.defaultExpectation.paramPtrs = &SolutionRepositoryMockDeployParamPtrs{}
	}
	mmDeploy.defaultExpectation.paramPtrs.ctx = &ctx

	return mmDeploy
}

// Inspect accepts an inspector function that has same arguments as the SolutionRepository.Deploy
func (mmDeploy *mSolutionRepositoryMockDeploy) Inspect(f func(ctx context.Context)) *mSolutionRepositoryMockDeploy {
	if mmDeploy.mock.inspectFuncDeploy != nil {
		mmDeploy.mock.t.Fatalf("Inspect function is already set for SolutionRepositoryMock.Deploy")
	}

	mmDeploy.mock.inspectFuncDeploy = f

	return mmDeploy
}

// Return sets up results that will be returned by SolutionRepository.Deploy
func (mmDeploy *mSolutionRepositoryMockDeploy) Return(err error) *SolutionRepositoryMock {
	if mmDeploy.mock.funcDeploy != nil {
		mmDeploy.mock.t.Fatalf("SolutionRepositoryMock.Deploy mock is already set by Set")
	}

	if mmDeploy.defaultExpectation == nil {
		mmDeploy.defaultExpectation = &SolutionRepositoryMockDeployExpectation{mock: mmDeploy.mock}
	}
	mmDeploy.defaultExpectation.results = &SolutionRepositoryMockDeployResults{err}
	return mmDeploy.mock
}

// Set uses given function f to mock the SolutionRepository.Deploy method
func (mmDeploy *mSolutionRepositoryMockDeploy) Set(f func(ctx context.Context) (err error)) *SolutionRepositoryMock {
	if mmDeploy.defaultExpectation != nil {
		mmDeploy.mock.t.Fatalf("Default expectation is already set for the SolutionRepository.Deploy method")
	}

	if len(mmDeploy.expectations) > 0 {
		mmDeploy.mock.t.Fatalf("Some expectations are already set for the SolutionRepository.Deploy method")
	}

	mmDeploy.mock.funcDeploy = f
	return mmDeploy.mock
}

// When sets expectation for the SolutionRepository.Deploy which will trigger the result defined by the following
// Then helper
func (mmDeploy *mSolutionRepositoryMockDeploy) When(ctx context.Context) *SolutionRepositoryMockDeployExpectation {
	if mmDeploy.mock.funcDeploy != nil {
		mmDeploy.mock.t.Fatalf("SolutionRepositoryMock.Deploy mock is already set by Set")
	}

	expectation := &SolutionRepositoryMockDeployExpectation{
		mock:   mmDeploy.mock,
		params: &SolutionRepositoryMockDeployParams{ctx},
	}
	mmDeploy.expectations = append(mmDeploy.expectations, expectation)
	return expectation
}

// Then sets up SolutionRepository.Deploy return parameters for the expectation previously defined by the When method
func (e *SolutionRepositoryMockDeployExpectation) Then(err error) *SolutionRepositoryMock {
	e.results = &SolutionRepositoryMockDeployResults{err}
	return e.mock
}

// Times sets number of times SolutionRepository.Deploy should be invoked
func (mmDeploy *mSolutionRepositoryMockDeploy) Times(n uint64) *mSolutionRepositoryMockDeploy {
	if n == 0 {
		mmDeploy.mock.t.Fatalf("Times of SolutionRepositoryMock.Deploy mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmDeploy.expectedInvocations, n)
	return mmDeploy
}

func (mmDeploy *mSolutionRepositoryMockDeploy) invocationsDone() bool {
	if len(mmDeploy.expectations) == 0 && mmDeploy.defaultExpectation == nil && mmDeploy.mock.funcDeploy == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmDeploy.mock.afterDeployCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmDeploy.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Deploy implements repository.SolutionRepository
func (mmDeploy *SolutionRepositoryMock) Deploy(ctx context.Context) (err error) {
	mm_atomic.AddUint64(&mmDeploy.beforeDeployCounter, 1)
	defer mm_atomic.AddUint64(&mmDeploy.afterDeployCounter, 1)

	if mmDeploy.inspectFuncDeploy != nil {
		mmDeploy.inspectFuncDeploy(ctx)
	}

	mm_params := SolutionRepositoryMockDeployParams{ctx}

	// Record call args
	mmDeploy.DeployMock.mutex.Lock()
	mmDeploy.DeployMock.callArgs = append(mmDeploy.DeployMock.callArgs, &mm_params)
	mmDeploy.DeployMock.mutex.Unlock()

	for _, e := range mmDeploy.DeployMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmDeploy.DeployMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmDeploy.DeployMock.defaultExpectation.Counter, 1)
		mm_want := mmDeploy.DeployMock.defaultExpectation.params
		mm_want_ptrs := mmDeploy.DeployMock.defaultExpectation.paramPtrs

		mm_got := SolutionRepositoryMockDeployParams{ctx}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmDeploy.t.Errorf("SolutionRepositoryMock.Deploy got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmDeploy.t.Errorf("SolutionRepositoryMock.Deploy got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmDeploy.DeployMock.defaultExpectation.results
		if mm_results == nil {
			mmDeploy.t.Fatal("No results are set for the SolutionRepositoryMock.Deploy")
		}
		return (*mm_results).err
	}
	if mmDeploy.funcDeploy != nil {
		return mmDeploy.funcDeploy(ctx)
	}
	mmDeploy.t.Fatalf("Unexpected call to SolutionRepositoryMock.Deploy. %v", ctx)
	return
}

// DeployAfterCounter returns a count of finished SolutionRepositoryMock.Deploy invocations
func (mmDeploy *SolutionRepositoryMock) DeployAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDeploy.afterDeployCounter)
}

// DeployBeforeCounter returns a count of SolutionRepositoryMock.Deploy invocations
func (mmDeploy *SolutionRepositoryMock) DeployBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDeploy.beforeDeployCounter)
}

// Calls returns a list of arguments used in each call to SolutionRepositoryMock.Deploy.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmDeploy *mSolutionRepositoryMockDeploy) Calls() []*SolutionRepositoryMockDeployParams {
	mmDeploy.mutex.RLock()

	argCopy := make([]*SolutionRepositoryMockDeployParams, len(mmDeploy.callArgs))
	copy(argCopy, mmDeploy.callArgs)

	mmDeploy.mutex.RUnlock()

	return argCopy
}

// MinimockDeployDone returns true if the count of the Deploy invocations corresponds
// the number of defined expectations
func (m *SolutionRepositoryMock) MinimockDeployDone() bool {
	if m.DeployMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.DeployMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.DeployMock.invocationsDone()
}

// MinimockDeployInspect logs each unmet expectation
func (m *SolutionRepositoryMock) MinimockDeployInspect() {
	for _, e := range m.DeployMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to SolutionRepositoryMock.Deploy with params: %#v", *e.params)
		}
	}

	afterDeployCounter := mm_atomic.LoadUint64(&m.afterDeployCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.DeployMock.defaultExpectation != nil && afterDeployCounter < 1 {
		if m.DeployMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to SolutionRepositoryMock.Deploy")
		} else {
			m.t.Errorf("Expected call to SolutionRepositoryMock.Deploy with params: %#v", *m.DeployMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDeploy != nil && afterDeployCounter < 1 {
		m.t.Error("Expected call to SolutionRepositoryMock.Deploy")
	}

	if !m.DeployMock.invocationsDone() && afterDeployCounter > 0 {
		m.t.Errorf("Expected %d calls to SolutionRepositoryMock.Deploy but found %d calls",
			mm_atomic.LoadUint64(&m.DeployMock.expectedInvocations), afterDeployCounter)
	}
}

type mSolutionRepositoryMockList struct {
	optional           bool
	mock               *SolutionRepositoryMock
	defaultExpectation *SolutionRepositoryMockListExpectation
	expectations       []*SolutionRepositoryMockListExpectation

	callArgs []*SolutionRepositoryMockListParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// SolutionRepositoryMockListExpectation specifies expectation struct of the SolutionRepository.List
type SolutionRepositoryMockListExpectation struct {
	mock      *SolutionRepositoryMock
	params    *SolutionRepositoryMockListParams
	paramPtrs *SolutionRepositoryMockListParamPtrs
	results   *SolutionRepositoryMockListResults
	Counter   uint64
}

// SolutionRepositoryMockListParams contains parameters of the SolutionRepository.List
type SolutionRepositoryMockListParams struct {
	ctx context.Context
}

// SolutionRepositoryMockListParamPtrs contains pointers to parameters of the SolutionRepository.List
type SolutionRepositoryMockListParamPtrs struct {
	ctx *context.Context
}

// SolutionRepositoryMockListResults contains results of the SolutionRepository.List
type SolutionRepositoryMockListResults struct {
	spa1 []*model.Solution
	err  error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option by default unless you really need it, as it helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmList *mSolutionRepositoryMockList) Optional() *mSolutionRepositoryMockList {
	mmList.optional = true
	return mmList
}

// Expect sets up expected params for SolutionRepository.List
func (mmList *mSolutionRepositoryMockList) Expect(ctx context.Context) *mSolutionRepositoryMockList {
	if mmList.mock.funcList != nil {
		mmList.mock.t.Fatalf("SolutionRepositoryMock.List mock is already set by Set")
	}

	if mmList.defaultExpectation == nil {
		mmList.defaultExpectation = &SolutionRepositoryMockListExpectation{}
	}

	if mmList.defaultExpectation.paramPtrs != nil {
		mmList.mock.t.Fatalf("SolutionRepositoryMock.List mock is already set by ExpectParams functions")
	}

	mmList.defaultExpectation.params = &SolutionRepositoryMockListParams{ctx}
	for _, e := range mmList.expectations {
		if minimock.Equal(e.params, mmList.defaultExpectation.params) {
			mmList.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmList.defaultExpectation.params)
		}
	}

	return mmList
}

// ExpectCtxParam1 sets up expected param ctx for SolutionRepository.List
func (mmList *mSolutionRepositoryMockList) ExpectCtxParam1(ctx context.Context) *mSolutionRepositoryMockList {
	if mmList.mock.funcList != nil {
		mmList.mock.t.Fatalf("SolutionRepositoryMock.List mock is already set by Set")
	}

	if mmList.defaultExpectation == nil {
		mmList.defaultExpectation = &SolutionRepositoryMockListExpectation{}
	}

	if mmList.defaultExpectation.params != nil {
		mmList.mock.t.Fatalf("SolutionRepositoryMock.List mock is already set by Expect")
	}

	if mmList.defaultExpectation.paramPtrs == nil {
		mmList.defaultExpectation.paramPtrs = &SolutionRepositoryMockListParamPtrs{}
	}
	mmList.defaultExpectation.paramPtrs.ctx = &ctx

	return mmList
}

// Inspect accepts an inspector function that has same arguments as the SolutionRepository.List
func (mmList *mSolutionRepositoryMockList) Inspect(f func(ctx context.Context)) *mSolutionRepositoryMockList {
	if mmList.mock.inspectFuncList != nil {
		mmList.mock.t.Fatalf("Inspect function is already set for SolutionRepositoryMock.List")
	}

	mmList.mock.inspectFuncList = f

	return mmList
}

// Return sets up results that will be returned by SolutionRepository.List
func (mmList *mSolutionRepositoryMockList) Return(spa1 []*model.Solution, err error) *SolutionRepositoryMock {
	if mmList.mock.funcList != nil {
		mmList.mock.t.Fatalf("SolutionRepositoryMock.List mock is already set by Set")
	}

	if mmList.defaultExpectation == nil {
		mmList.defaultExpectation = &SolutionRepositoryMockListExpectation{mock: mmList.mock}
	}
	mmList.defaultExpectation.results = &SolutionRepositoryMockListResults{spa1, err}
	return mmList.mock
}

// Set uses given function f to mock the SolutionRepository.List method
func (mmList *mSolutionRepositoryMockList) Set(f func(ctx context.Context) (spa1 []*model.Solution, err error)) *SolutionRepositoryMock {
	if mmList.defaultExpectation != nil {
		mmList.mock.t.Fatalf("Default expectation is already set for the SolutionRepository.List method")
	}

	if len(mmList.expectations) > 0 {
		mmList.mock.t.Fatalf("Some expectations are already set for the SolutionRepository.List method")
	}

	mmList.mock.funcList = f
	return mmList.mock
}

// When sets expectation for the SolutionRepository.List which will trigger the result defined by the following
// Then helper
func (mmList *mSolutionRepositoryMockList) When(ctx context.Context) *SolutionRepositoryMockListExpectation {
	if mmList.mock.funcList != nil {
		mmList.mock.t.Fatalf("SolutionRepositoryMock.List mock is already set by Set")
	}

	expectation := &SolutionRepositoryMockListExpectation{
		mock:   mmList.mock,
		params: &SolutionRepositoryMockListParams{ctx},
	}
	mmList.expectations = append(mmList.expectations, expectation)
	return expectation
}

// Then sets up SolutionRepository.List return parameters for the expectation previously defined by the When method
func (e *SolutionRepositoryMockListExpectation) Then(spa1 []*model.Solution, err error) *SolutionRepositoryMock {
	e.results = &SolutionRepositoryMockListResults{spa1, err}
	return e.mock
}

// Times sets number of times SolutionRepository.List should be invoked
func (mmList *mSolutionRepositoryMockList) Times(n uint64) *mSolutionRepositoryMockList {
	if n == 0 {
		mmList.mock.t.Fatalf("Times of SolutionRepositoryMock.List mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmList.expectedInvocations, n)
	return mmList
}

func (mmList *mSolutionRepositoryMockList) invocationsDone() bool {
	if len(mmList.expectations) == 0 && mmList.defaultExpectation == nil && mmList.mock.funcList == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmList.mock.afterListCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmList.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// List implements repository.SolutionRepository
func (mmList *SolutionRepositoryMock) List(ctx context.Context) (spa1 []*model.Solution, err error) {
	mm_atomic.AddUint64(&mmList.beforeListCounter, 1)
	defer mm_atomic.AddUint64(&mmList.afterListCounter, 1)

	if mmList.inspectFuncList != nil {
		mmList.inspectFuncList(ctx)
	}

	mm_params := SolutionRepositoryMockListParams{ctx}

	// Record call args
	mmList.ListMock.mutex.Lock()
	mmList.ListMock.callArgs = append(mmList.ListMock.callArgs, &mm_params)
	mmList.ListMock.mutex.Unlock()

	for _, e := range mmList.ListMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.spa1, e.results.err
		}
	}

	if mmList.ListMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmList.ListMock.defaultExpectation.Counter, 1)
		mm_want := mmList.ListMock.defaultExpectation.params
		mm_want_ptrs := mmList.ListMock.defaultExpectation.paramPtrs

		mm_got := SolutionRepositoryMockListParams{ctx}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmList.t.Errorf("SolutionRepositoryMock.List got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmList.t.Errorf("SolutionRepositoryMock.List got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmList.ListMock.defaultExpectation.results
		if mm_results == nil {
			mmList.t.Fatal("No results are set for the SolutionRepositoryMock.List")
		}
		return (*mm_results).spa1, (*mm_results).err
	}
	if mmList.funcList != nil {
		return mmList.funcList(ctx)
	}
	mmList.t.Fatalf("Unexpected call to SolutionRepositoryMock.List. %v", ctx)
	return
}

// ListAfterCounter returns a count of finished SolutionRepositoryMock.List invocations
func (mmList *SolutionRepositoryMock) ListAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmList.afterListCounter)
}

// ListBeforeCounter returns a count of SolutionRepositoryMock.List invocations
func (mmList *SolutionRepositoryMock) ListBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmList.beforeListCounter)
}

// Calls returns a list of arguments used in each call to SolutionRepositoryMock.List.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmList *mSolutionRepositoryMockList) Calls() []*SolutionRepositoryMockListParams {
	mmList.mutex.RLock()

	argCopy := make([]*SolutionRepositoryMockListParams, len(mmList.callArgs))
	copy(argCopy, mmList.callArgs)

	mmList.mutex.RUnlock()

	return argCopy
}

// MinimockListDone returns true if the count of the List invocations corresponds
// the number of defined expectations
func (m *SolutionRepositoryMock) MinimockListDone() bool {
	if m.ListMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.ListMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.ListMock.invocationsDone()
}

// MinimockListInspect logs each unmet expectation
func (m *SolutionRepositoryMock) MinimockListInspect() {
	for _, e := range m.ListMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to SolutionRepositoryMock.List with params: %#v", *e.params)
		}
	}

	afterListCounter := mm_atomic.LoadUint64(&m.afterListCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.ListMock.defaultExpectation != nil && afterListCounter < 1 {
		if m.ListMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to SolutionRepositoryMock.List")
		} else {
			m.t.Errorf("Expected call to SolutionRepositoryMock.List with params: %#v", *m.ListMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcList != nil && afterListCounter < 1 {
		m.t.Error("Expected call to SolutionRepositoryMock.List")
	}

	if !m.ListMock.invocationsDone() && afterListCounter > 0 {
		m.t.Errorf("Expected %d calls to SolutionRepositoryMock.List but found %d calls",
			mm_atomic.LoadUint64(&m.ListMock.expectedInvocations), afterListCounter)
	}
}

type mSolutionRepositoryMockStatus struct {
	optional           bool
	mock               *SolutionRepositoryMock
	defaultExpectation *SolutionRepositoryMockStatusExpectation
	expectations       []*SolutionRepositoryMockStatusExpectation

	callArgs []*SolutionRepositoryMockStatusParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// SolutionRepositoryMockStatusExpectation specifies expectation struct of the SolutionRepository.Status
type SolutionRepositoryMockStatusExpectation struct {
	mock      *SolutionRepositoryMock
	params    *SolutionRepositoryMockStatusParams
	paramPtrs *SolutionRepositoryMockStatusParamPtrs
	results   *SolutionRepositoryMockStatusResults
	Counter   uint64
}

// SolutionRepositoryMockStatusParams contains parameters of the SolutionRepository.Status
type SolutionRepositoryMockStatusParams struct {
	ctx context.Context
}

// SolutionRepositoryMockStatusParamPtrs contains pointers to parameters of the SolutionRepository.Status
type SolutionRepositoryMockStatusParamPtrs struct {
	ctx *context.Context
}

// SolutionRepositoryMockStatusResults contains results of the SolutionRepository.Status
type SolutionRepositoryMockStatusResults struct {
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option by default unless you really need it, as it helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmStatus *mSolutionRepositoryMockStatus) Optional() *mSolutionRepositoryMockStatus {
	mmStatus.optional = true
	return mmStatus
}

// Expect sets up expected params for SolutionRepository.Status
func (mmStatus *mSolutionRepositoryMockStatus) Expect(ctx context.Context) *mSolutionRepositoryMockStatus {
	if mmStatus.mock.funcStatus != nil {
		mmStatus.mock.t.Fatalf("SolutionRepositoryMock.Status mock is already set by Set")
	}

	if mmStatus.defaultExpectation == nil {
		mmStatus.defaultExpectation = &SolutionRepositoryMockStatusExpectation{}
	}

	if mmStatus.defaultExpectation.paramPtrs != nil {
		mmStatus.mock.t.Fatalf("SolutionRepositoryMock.Status mock is already set by ExpectParams functions")
	}

	mmStatus.defaultExpectation.params = &SolutionRepositoryMockStatusParams{ctx}
	for _, e := range mmStatus.expectations {
		if minimock.Equal(e.params, mmStatus.defaultExpectation.params) {
			mmStatus.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmStatus.defaultExpectation.params)
		}
	}

	return mmStatus
}

// ExpectCtxParam1 sets up expected param ctx for SolutionRepository.Status
func (mmStatus *mSolutionRepositoryMockStatus) ExpectCtxParam1(ctx context.Context) *mSolutionRepositoryMockStatus {
	if mmStatus.mock.funcStatus != nil {
		mmStatus.mock.t.Fatalf("SolutionRepositoryMock.Status mock is already set by Set")
	}

	if mmStatus.defaultExpectation == nil {
		mmStatus.defaultExpectation = &SolutionRepositoryMockStatusExpectation{}
	}

	if mmStatus.defaultExpectation.params != nil {
		mmStatus.mock.t.Fatalf("SolutionRepositoryMock.Status mock is already set by Expect")
	}

	if mmStatus.defaultExpectation.paramPtrs == nil {
		mmStatus.defaultExpectation.paramPtrs = &SolutionRepositoryMockStatusParamPtrs{}
	}
	mmStatus.defaultExpectation.paramPtrs.ctx = &ctx

	return mmStatus
}

// Inspect accepts an inspector function that has same arguments as the SolutionRepository.Status
func (mmStatus *mSolutionRepositoryMockStatus) Inspect(f func(ctx context.Context)) *mSolutionRepositoryMockStatus {
	if mmStatus.mock.inspectFuncStatus != nil {
		mmStatus.mock.t.Fatalf("Inspect function is already set for SolutionRepositoryMock.Status")
	}

	mmStatus.mock.inspectFuncStatus = f

	return mmStatus
}

// Return sets up results that will be returned by SolutionRepository.Status
func (mmStatus *mSolutionRepositoryMockStatus) Return(err error) *SolutionRepositoryMock {
	if mmStatus.mock.funcStatus != nil {
		mmStatus.mock.t.Fatalf("SolutionRepositoryMock.Status mock is already set by Set")
	}

	if mmStatus.defaultExpectation == nil {
		mmStatus.defaultExpectation = &SolutionRepositoryMockStatusExpectation{mock: mmStatus.mock}
	}
	mmStatus.defaultExpectation.results = &SolutionRepositoryMockStatusResults{err}
	return mmStatus.mock
}

// Set uses given function f to mock the SolutionRepository.Status method
func (mmStatus *mSolutionRepositoryMockStatus) Set(f func(ctx context.Context) (err error)) *SolutionRepositoryMock {
	if mmStatus.defaultExpectation != nil {
		mmStatus.mock.t.Fatalf("Default expectation is already set for the SolutionRepository.Status method")
	}

	if len(mmStatus.expectations) > 0 {
		mmStatus.mock.t.Fatalf("Some expectations are already set for the SolutionRepository.Status method")
	}

	mmStatus.mock.funcStatus = f
	return mmStatus.mock
}

// When sets expectation for the SolutionRepository.Status which will trigger the result defined by the following
// Then helper
func (mmStatus *mSolutionRepositoryMockStatus) When(ctx context.Context) *SolutionRepositoryMockStatusExpectation {
	if mmStatus.mock.funcStatus != nil {
		mmStatus.mock.t.Fatalf("SolutionRepositoryMock.Status mock is already set by Set")
	}

	expectation := &SolutionRepositoryMockStatusExpectation{
		mock:   mmStatus.mock,
		params: &SolutionRepositoryMockStatusParams{ctx},
	}
	mmStatus.expectations = append(mmStatus.expectations, expectation)
	return expectation
}

// Then sets up SolutionRepository.Status return parameters for the expectation previously defined by the When method
func (e *SolutionRepositoryMockStatusExpectation) Then(err error) *SolutionRepositoryMock {
	e.results = &SolutionRepositoryMockStatusResults{err}
	return e.mock
}

// Times sets number of times SolutionRepository.Status should be invoked
func (mmStatus *mSolutionRepositoryMockStatus) Times(n uint64) *mSolutionRepositoryMockStatus {
	if n == 0 {
		mmStatus.mock.t.Fatalf("Times of SolutionRepositoryMock.Status mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmStatus.expectedInvocations, n)
	return mmStatus
}

func (mmStatus *mSolutionRepositoryMockStatus) invocationsDone() bool {
	if len(mmStatus.expectations) == 0 && mmStatus.defaultExpectation == nil && mmStatus.mock.funcStatus == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmStatus.mock.afterStatusCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmStatus.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Status implements repository.SolutionRepository
func (mmStatus *SolutionRepositoryMock) Status(ctx context.Context) (err error) {
	mm_atomic.AddUint64(&mmStatus.beforeStatusCounter, 1)
	defer mm_atomic.AddUint64(&mmStatus.afterStatusCounter, 1)

	if mmStatus.inspectFuncStatus != nil {
		mmStatus.inspectFuncStatus(ctx)
	}

	mm_params := SolutionRepositoryMockStatusParams{ctx}

	// Record call args
	mmStatus.StatusMock.mutex.Lock()
	mmStatus.StatusMock.callArgs = append(mmStatus.StatusMock.callArgs, &mm_params)
	mmStatus.StatusMock.mutex.Unlock()

	for _, e := range mmStatus.StatusMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmStatus.StatusMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmStatus.StatusMock.defaultExpectation.Counter, 1)
		mm_want := mmStatus.StatusMock.defaultExpectation.params
		mm_want_ptrs := mmStatus.StatusMock.defaultExpectation.paramPtrs

		mm_got := SolutionRepositoryMockStatusParams{ctx}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmStatus.t.Errorf("SolutionRepositoryMock.Status got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmStatus.t.Errorf("SolutionRepositoryMock.Status got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmStatus.StatusMock.defaultExpectation.results
		if mm_results == nil {
			mmStatus.t.Fatal("No results are set for the SolutionRepositoryMock.Status")
		}
		return (*mm_results).err
	}
	if mmStatus.funcStatus != nil {
		return mmStatus.funcStatus(ctx)
	}
	mmStatus.t.Fatalf("Unexpected call to SolutionRepositoryMock.Status. %v", ctx)
	return
}

// StatusAfterCounter returns a count of finished SolutionRepositoryMock.Status invocations
func (mmStatus *SolutionRepositoryMock) StatusAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmStatus.afterStatusCounter)
}

// StatusBeforeCounter returns a count of SolutionRepositoryMock.Status invocations
func (mmStatus *SolutionRepositoryMock) StatusBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmStatus.beforeStatusCounter)
}

// Calls returns a list of arguments used in each call to SolutionRepositoryMock.Status.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmStatus *mSolutionRepositoryMockStatus) Calls() []*SolutionRepositoryMockStatusParams {
	mmStatus.mutex.RLock()

	argCopy := make([]*SolutionRepositoryMockStatusParams, len(mmStatus.callArgs))
	copy(argCopy, mmStatus.callArgs)

	mmStatus.mutex.RUnlock()

	return argCopy
}

// MinimockStatusDone returns true if the count of the Status invocations corresponds
// the number of defined expectations
func (m *SolutionRepositoryMock) MinimockStatusDone() bool {
	if m.StatusMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.StatusMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.StatusMock.invocationsDone()
}

// MinimockStatusInspect logs each unmet expectation
func (m *SolutionRepositoryMock) MinimockStatusInspect() {
	for _, e := range m.StatusMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to SolutionRepositoryMock.Status with params: %#v", *e.params)
		}
	}

	afterStatusCounter := mm_atomic.LoadUint64(&m.afterStatusCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.StatusMock.defaultExpectation != nil && afterStatusCounter < 1 {
		if m.StatusMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to SolutionRepositoryMock.Status")
		} else {
			m.t.Errorf("Expected call to SolutionRepositoryMock.Status with params: %#v", *m.StatusMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcStatus != nil && afterStatusCounter < 1 {
		m.t.Error("Expected call to SolutionRepositoryMock.Status")
	}

	if !m.StatusMock.invocationsDone() && afterStatusCounter > 0 {
		m.t.Errorf("Expected %d calls to SolutionRepositoryMock.Status but found %d calls",
			mm_atomic.LoadUint64(&m.StatusMock.expectedInvocations), afterStatusCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *SolutionRepositoryMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockDeployInspect()

			m.MinimockListInspect()

			m.MinimockStatusInspect()
			m.t.FailNow()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *SolutionRepositoryMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *SolutionRepositoryMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockDeployDone() &&
		m.MinimockListDone() &&
		m.MinimockStatusDone()
}
