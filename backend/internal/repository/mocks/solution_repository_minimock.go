// Code generated by http://github.com/gojuno/minimock (v3.3.10). DO NOT EDIT.

package mocks

//go:generate minimock -i gitlab.crja72.ru/gospec/go16/easydeploy/backend/internal/repository.SolutionRepository -o solution_repository_minimock.go -n SolutionRepositoryMock -p mocks

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"gitlab.crja72.ru/gospec/go16/easydeploy/backend/internal/model"
)

// SolutionRepositoryMock implements repository.SolutionRepository
type SolutionRepositoryMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcGet          func(ctx context.Context, id int64) (sp1 *model.Solution, err error)
	inspectFuncGet   func(ctx context.Context, id int64)
	afterGetCounter  uint64
	beforeGetCounter uint64
	GetMock          mSolutionRepositoryMockGet

	funcList          func(ctx context.Context) (spa1 []*model.Solution, err error)
	inspectFuncList   func(ctx context.Context)
	afterListCounter  uint64
	beforeListCounter uint64
	ListMock          mSolutionRepositoryMockList
}

// NewSolutionRepositoryMock returns a mock for repository.SolutionRepository
func NewSolutionRepositoryMock(t minimock.Tester) *SolutionRepositoryMock {
	m := &SolutionRepositoryMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetMock = mSolutionRepositoryMockGet{mock: m}
	m.GetMock.callArgs = []*SolutionRepositoryMockGetParams{}

	m.ListMock = mSolutionRepositoryMockList{mock: m}
	m.ListMock.callArgs = []*SolutionRepositoryMockListParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mSolutionRepositoryMockGet struct {
	optional           bool
	mock               *SolutionRepositoryMock
	defaultExpectation *SolutionRepositoryMockGetExpectation
	expectations       []*SolutionRepositoryMockGetExpectation

	callArgs []*SolutionRepositoryMockGetParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// SolutionRepositoryMockGetExpectation specifies expectation struct of the SolutionRepository.Get
type SolutionRepositoryMockGetExpectation struct {
	mock      *SolutionRepositoryMock
	params    *SolutionRepositoryMockGetParams
	paramPtrs *SolutionRepositoryMockGetParamPtrs
	results   *SolutionRepositoryMockGetResults
	Counter   uint64
}

// SolutionRepositoryMockGetParams contains parameters of the SolutionRepository.Get
type SolutionRepositoryMockGetParams struct {
	ctx context.Context
	id  int64
}

// SolutionRepositoryMockGetParamPtrs contains pointers to parameters of the SolutionRepository.Get
type SolutionRepositoryMockGetParamPtrs struct {
	ctx *context.Context
	id  *int64
}

// SolutionRepositoryMockGetResults contains results of the SolutionRepository.Get
type SolutionRepositoryMockGetResults struct {
	sp1 *model.Solution
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option by default unless you really need it, as it helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGet *mSolutionRepositoryMockGet) Optional() *mSolutionRepositoryMockGet {
	mmGet.optional = true
	return mmGet
}

// Expect sets up expected params for SolutionRepository.Get
func (mmGet *mSolutionRepositoryMockGet) Expect(ctx context.Context, id int64) *mSolutionRepositoryMockGet {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("SolutionRepositoryMock.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &SolutionRepositoryMockGetExpectation{}
	}

	if mmGet.defaultExpectation.paramPtrs != nil {
		mmGet.mock.t.Fatalf("SolutionRepositoryMock.Get mock is already set by ExpectParams functions")
	}

	mmGet.defaultExpectation.params = &SolutionRepositoryMockGetParams{ctx, id}
	for _, e := range mmGet.expectations {
		if minimock.Equal(e.params, mmGet.defaultExpectation.params) {
			mmGet.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGet.defaultExpectation.params)
		}
	}

	return mmGet
}

// ExpectCtxParam1 sets up expected param ctx for SolutionRepository.Get
func (mmGet *mSolutionRepositoryMockGet) ExpectCtxParam1(ctx context.Context) *mSolutionRepositoryMockGet {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("SolutionRepositoryMock.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &SolutionRepositoryMockGetExpectation{}
	}

	if mmGet.defaultExpectation.params != nil {
		mmGet.mock.t.Fatalf("SolutionRepositoryMock.Get mock is already set by Expect")
	}

	if mmGet.defaultExpectation.paramPtrs == nil {
		mmGet.defaultExpectation.paramPtrs = &SolutionRepositoryMockGetParamPtrs{}
	}
	mmGet.defaultExpectation.paramPtrs.ctx = &ctx

	return mmGet
}

// ExpectIdParam2 sets up expected param id for SolutionRepository.Get
func (mmGet *mSolutionRepositoryMockGet) ExpectIdParam2(id int64) *mSolutionRepositoryMockGet {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("SolutionRepositoryMock.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &SolutionRepositoryMockGetExpectation{}
	}

	if mmGet.defaultExpectation.params != nil {
		mmGet.mock.t.Fatalf("SolutionRepositoryMock.Get mock is already set by Expect")
	}

	if mmGet.defaultExpectation.paramPtrs == nil {
		mmGet.defaultExpectation.paramPtrs = &SolutionRepositoryMockGetParamPtrs{}
	}
	mmGet.defaultExpectation.paramPtrs.id = &id

	return mmGet
}

// Inspect accepts an inspector function that has same arguments as the SolutionRepository.Get
func (mmGet *mSolutionRepositoryMockGet) Inspect(f func(ctx context.Context, id int64)) *mSolutionRepositoryMockGet {
	if mmGet.mock.inspectFuncGet != nil {
		mmGet.mock.t.Fatalf("Inspect function is already set for SolutionRepositoryMock.Get")
	}

	mmGet.mock.inspectFuncGet = f

	return mmGet
}

// Return sets up results that will be returned by SolutionRepository.Get
func (mmGet *mSolutionRepositoryMockGet) Return(sp1 *model.Solution, err error) *SolutionRepositoryMock {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("SolutionRepositoryMock.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &SolutionRepositoryMockGetExpectation{mock: mmGet.mock}
	}
	mmGet.defaultExpectation.results = &SolutionRepositoryMockGetResults{sp1, err}
	return mmGet.mock
}

// Set uses given function f to mock the SolutionRepository.Get method
func (mmGet *mSolutionRepositoryMockGet) Set(f func(ctx context.Context, id int64) (sp1 *model.Solution, err error)) *SolutionRepositoryMock {
	if mmGet.defaultExpectation != nil {
		mmGet.mock.t.Fatalf("Default expectation is already set for the SolutionRepository.Get method")
	}

	if len(mmGet.expectations) > 0 {
		mmGet.mock.t.Fatalf("Some expectations are already set for the SolutionRepository.Get method")
	}

	mmGet.mock.funcGet = f
	return mmGet.mock
}

// When sets expectation for the SolutionRepository.Get which will trigger the result defined by the following
// Then helper
func (mmGet *mSolutionRepositoryMockGet) When(ctx context.Context, id int64) *SolutionRepositoryMockGetExpectation {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("SolutionRepositoryMock.Get mock is already set by Set")
	}

	expectation := &SolutionRepositoryMockGetExpectation{
		mock:   mmGet.mock,
		params: &SolutionRepositoryMockGetParams{ctx, id},
	}
	mmGet.expectations = append(mmGet.expectations, expectation)
	return expectation
}

// Then sets up SolutionRepository.Get return parameters for the expectation previously defined by the When method
func (e *SolutionRepositoryMockGetExpectation) Then(sp1 *model.Solution, err error) *SolutionRepositoryMock {
	e.results = &SolutionRepositoryMockGetResults{sp1, err}
	return e.mock
}

// Times sets number of times SolutionRepository.Get should be invoked
func (mmGet *mSolutionRepositoryMockGet) Times(n uint64) *mSolutionRepositoryMockGet {
	if n == 0 {
		mmGet.mock.t.Fatalf("Times of SolutionRepositoryMock.Get mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGet.expectedInvocations, n)
	return mmGet
}

func (mmGet *mSolutionRepositoryMockGet) invocationsDone() bool {
	if len(mmGet.expectations) == 0 && mmGet.defaultExpectation == nil && mmGet.mock.funcGet == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGet.mock.afterGetCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGet.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Get implements repository.SolutionRepository
func (mmGet *SolutionRepositoryMock) Get(ctx context.Context, id int64) (sp1 *model.Solution, err error) {
	mm_atomic.AddUint64(&mmGet.beforeGetCounter, 1)
	defer mm_atomic.AddUint64(&mmGet.afterGetCounter, 1)

	if mmGet.inspectFuncGet != nil {
		mmGet.inspectFuncGet(ctx, id)
	}

	mm_params := SolutionRepositoryMockGetParams{ctx, id}

	// Record call args
	mmGet.GetMock.mutex.Lock()
	mmGet.GetMock.callArgs = append(mmGet.GetMock.callArgs, &mm_params)
	mmGet.GetMock.mutex.Unlock()

	for _, e := range mmGet.GetMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.sp1, e.results.err
		}
	}

	if mmGet.GetMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGet.GetMock.defaultExpectation.Counter, 1)
		mm_want := mmGet.GetMock.defaultExpectation.params
		mm_want_ptrs := mmGet.GetMock.defaultExpectation.paramPtrs

		mm_got := SolutionRepositoryMockGetParams{ctx, id}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGet.t.Errorf("SolutionRepositoryMock.Get got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.id != nil && !minimock.Equal(*mm_want_ptrs.id, mm_got.id) {
				mmGet.t.Errorf("SolutionRepositoryMock.Get got unexpected parameter id, want: %#v, got: %#v%s\n", *mm_want_ptrs.id, mm_got.id, minimock.Diff(*mm_want_ptrs.id, mm_got.id))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGet.t.Errorf("SolutionRepositoryMock.Get got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGet.GetMock.defaultExpectation.results
		if mm_results == nil {
			mmGet.t.Fatal("No results are set for the SolutionRepositoryMock.Get")
		}
		return (*mm_results).sp1, (*mm_results).err
	}
	if mmGet.funcGet != nil {
		return mmGet.funcGet(ctx, id)
	}
	mmGet.t.Fatalf("Unexpected call to SolutionRepositoryMock.Get. %v %v", ctx, id)
	return
}

// GetAfterCounter returns a count of finished SolutionRepositoryMock.Get invocations
func (mmGet *SolutionRepositoryMock) GetAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGet.afterGetCounter)
}

// GetBeforeCounter returns a count of SolutionRepositoryMock.Get invocations
func (mmGet *SolutionRepositoryMock) GetBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGet.beforeGetCounter)
}

// Calls returns a list of arguments used in each call to SolutionRepositoryMock.Get.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGet *mSolutionRepositoryMockGet) Calls() []*SolutionRepositoryMockGetParams {
	mmGet.mutex.RLock()

	argCopy := make([]*SolutionRepositoryMockGetParams, len(mmGet.callArgs))
	copy(argCopy, mmGet.callArgs)

	mmGet.mutex.RUnlock()

	return argCopy
}

// MinimockGetDone returns true if the count of the Get invocations corresponds
// the number of defined expectations
func (m *SolutionRepositoryMock) MinimockGetDone() bool {
	if m.GetMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetMock.invocationsDone()
}

// MinimockGetInspect logs each unmet expectation
func (m *SolutionRepositoryMock) MinimockGetInspect() {
	for _, e := range m.GetMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to SolutionRepositoryMock.Get with params: %#v", *e.params)
		}
	}

	afterGetCounter := mm_atomic.LoadUint64(&m.afterGetCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetMock.defaultExpectation != nil && afterGetCounter < 1 {
		if m.GetMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to SolutionRepositoryMock.Get")
		} else {
			m.t.Errorf("Expected call to SolutionRepositoryMock.Get with params: %#v", *m.GetMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGet != nil && afterGetCounter < 1 {
		m.t.Error("Expected call to SolutionRepositoryMock.Get")
	}

	if !m.GetMock.invocationsDone() && afterGetCounter > 0 {
		m.t.Errorf("Expected %d calls to SolutionRepositoryMock.Get but found %d calls",
			mm_atomic.LoadUint64(&m.GetMock.expectedInvocations), afterGetCounter)
	}
}

type mSolutionRepositoryMockList struct {
	optional           bool
	mock               *SolutionRepositoryMock
	defaultExpectation *SolutionRepositoryMockListExpectation
	expectations       []*SolutionRepositoryMockListExpectation

	callArgs []*SolutionRepositoryMockListParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// SolutionRepositoryMockListExpectation specifies expectation struct of the SolutionRepository.List
type SolutionRepositoryMockListExpectation struct {
	mock      *SolutionRepositoryMock
	params    *SolutionRepositoryMockListParams
	paramPtrs *SolutionRepositoryMockListParamPtrs
	results   *SolutionRepositoryMockListResults
	Counter   uint64
}

// SolutionRepositoryMockListParams contains parameters of the SolutionRepository.List
type SolutionRepositoryMockListParams struct {
	ctx context.Context
}

// SolutionRepositoryMockListParamPtrs contains pointers to parameters of the SolutionRepository.List
type SolutionRepositoryMockListParamPtrs struct {
	ctx *context.Context
}

// SolutionRepositoryMockListResults contains results of the SolutionRepository.List
type SolutionRepositoryMockListResults struct {
	spa1 []*model.Solution
	err  error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option by default unless you really need it, as it helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmList *mSolutionRepositoryMockList) Optional() *mSolutionRepositoryMockList {
	mmList.optional = true
	return mmList
}

// Expect sets up expected params for SolutionRepository.List
func (mmList *mSolutionRepositoryMockList) Expect(ctx context.Context) *mSolutionRepositoryMockList {
	if mmList.mock.funcList != nil {
		mmList.mock.t.Fatalf("SolutionRepositoryMock.List mock is already set by Set")
	}

	if mmList.defaultExpectation == nil {
		mmList.defaultExpectation = &SolutionRepositoryMockListExpectation{}
	}

	if mmList.defaultExpectation.paramPtrs != nil {
		mmList.mock.t.Fatalf("SolutionRepositoryMock.List mock is already set by ExpectParams functions")
	}

	mmList.defaultExpectation.params = &SolutionRepositoryMockListParams{ctx}
	for _, e := range mmList.expectations {
		if minimock.Equal(e.params, mmList.defaultExpectation.params) {
			mmList.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmList.defaultExpectation.params)
		}
	}

	return mmList
}

// ExpectCtxParam1 sets up expected param ctx for SolutionRepository.List
func (mmList *mSolutionRepositoryMockList) ExpectCtxParam1(ctx context.Context) *mSolutionRepositoryMockList {
	if mmList.mock.funcList != nil {
		mmList.mock.t.Fatalf("SolutionRepositoryMock.List mock is already set by Set")
	}

	if mmList.defaultExpectation == nil {
		mmList.defaultExpectation = &SolutionRepositoryMockListExpectation{}
	}

	if mmList.defaultExpectation.params != nil {
		mmList.mock.t.Fatalf("SolutionRepositoryMock.List mock is already set by Expect")
	}

	if mmList.defaultExpectation.paramPtrs == nil {
		mmList.defaultExpectation.paramPtrs = &SolutionRepositoryMockListParamPtrs{}
	}
	mmList.defaultExpectation.paramPtrs.ctx = &ctx

	return mmList
}

// Inspect accepts an inspector function that has same arguments as the SolutionRepository.List
func (mmList *mSolutionRepositoryMockList) Inspect(f func(ctx context.Context)) *mSolutionRepositoryMockList {
	if mmList.mock.inspectFuncList != nil {
		mmList.mock.t.Fatalf("Inspect function is already set for SolutionRepositoryMock.List")
	}

	mmList.mock.inspectFuncList = f

	return mmList
}

// Return sets up results that will be returned by SolutionRepository.List
func (mmList *mSolutionRepositoryMockList) Return(spa1 []*model.Solution, err error) *SolutionRepositoryMock {
	if mmList.mock.funcList != nil {
		mmList.mock.t.Fatalf("SolutionRepositoryMock.List mock is already set by Set")
	}

	if mmList.defaultExpectation == nil {
		mmList.defaultExpectation = &SolutionRepositoryMockListExpectation{mock: mmList.mock}
	}
	mmList.defaultExpectation.results = &SolutionRepositoryMockListResults{spa1, err}
	return mmList.mock
}

// Set uses given function f to mock the SolutionRepository.List method
func (mmList *mSolutionRepositoryMockList) Set(f func(ctx context.Context) (spa1 []*model.Solution, err error)) *SolutionRepositoryMock {
	if mmList.defaultExpectation != nil {
		mmList.mock.t.Fatalf("Default expectation is already set for the SolutionRepository.List method")
	}

	if len(mmList.expectations) > 0 {
		mmList.mock.t.Fatalf("Some expectations are already set for the SolutionRepository.List method")
	}

	mmList.mock.funcList = f
	return mmList.mock
}

// When sets expectation for the SolutionRepository.List which will trigger the result defined by the following
// Then helper
func (mmList *mSolutionRepositoryMockList) When(ctx context.Context) *SolutionRepositoryMockListExpectation {
	if mmList.mock.funcList != nil {
		mmList.mock.t.Fatalf("SolutionRepositoryMock.List mock is already set by Set")
	}

	expectation := &SolutionRepositoryMockListExpectation{
		mock:   mmList.mock,
		params: &SolutionRepositoryMockListParams{ctx},
	}
	mmList.expectations = append(mmList.expectations, expectation)
	return expectation
}

// Then sets up SolutionRepository.List return parameters for the expectation previously defined by the When method
func (e *SolutionRepositoryMockListExpectation) Then(spa1 []*model.Solution, err error) *SolutionRepositoryMock {
	e.results = &SolutionRepositoryMockListResults{spa1, err}
	return e.mock
}

// Times sets number of times SolutionRepository.List should be invoked
func (mmList *mSolutionRepositoryMockList) Times(n uint64) *mSolutionRepositoryMockList {
	if n == 0 {
		mmList.mock.t.Fatalf("Times of SolutionRepositoryMock.List mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmList.expectedInvocations, n)
	return mmList
}

func (mmList *mSolutionRepositoryMockList) invocationsDone() bool {
	if len(mmList.expectations) == 0 && mmList.defaultExpectation == nil && mmList.mock.funcList == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmList.mock.afterListCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmList.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// List implements repository.SolutionRepository
func (mmList *SolutionRepositoryMock) List(ctx context.Context) (spa1 []*model.Solution, err error) {
	mm_atomic.AddUint64(&mmList.beforeListCounter, 1)
	defer mm_atomic.AddUint64(&mmList.afterListCounter, 1)

	if mmList.inspectFuncList != nil {
		mmList.inspectFuncList(ctx)
	}

	mm_params := SolutionRepositoryMockListParams{ctx}

	// Record call args
	mmList.ListMock.mutex.Lock()
	mmList.ListMock.callArgs = append(mmList.ListMock.callArgs, &mm_params)
	mmList.ListMock.mutex.Unlock()

	for _, e := range mmList.ListMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.spa1, e.results.err
		}
	}

	if mmList.ListMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmList.ListMock.defaultExpectation.Counter, 1)
		mm_want := mmList.ListMock.defaultExpectation.params
		mm_want_ptrs := mmList.ListMock.defaultExpectation.paramPtrs

		mm_got := SolutionRepositoryMockListParams{ctx}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmList.t.Errorf("SolutionRepositoryMock.List got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmList.t.Errorf("SolutionRepositoryMock.List got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmList.ListMock.defaultExpectation.results
		if mm_results == nil {
			mmList.t.Fatal("No results are set for the SolutionRepositoryMock.List")
		}
		return (*mm_results).spa1, (*mm_results).err
	}
	if mmList.funcList != nil {
		return mmList.funcList(ctx)
	}
	mmList.t.Fatalf("Unexpected call to SolutionRepositoryMock.List. %v", ctx)
	return
}

// ListAfterCounter returns a count of finished SolutionRepositoryMock.List invocations
func (mmList *SolutionRepositoryMock) ListAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmList.afterListCounter)
}

// ListBeforeCounter returns a count of SolutionRepositoryMock.List invocations
func (mmList *SolutionRepositoryMock) ListBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmList.beforeListCounter)
}

// Calls returns a list of arguments used in each call to SolutionRepositoryMock.List.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmList *mSolutionRepositoryMockList) Calls() []*SolutionRepositoryMockListParams {
	mmList.mutex.RLock()

	argCopy := make([]*SolutionRepositoryMockListParams, len(mmList.callArgs))
	copy(argCopy, mmList.callArgs)

	mmList.mutex.RUnlock()

	return argCopy
}

// MinimockListDone returns true if the count of the List invocations corresponds
// the number of defined expectations
func (m *SolutionRepositoryMock) MinimockListDone() bool {
	if m.ListMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.ListMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.ListMock.invocationsDone()
}

// MinimockListInspect logs each unmet expectation
func (m *SolutionRepositoryMock) MinimockListInspect() {
	for _, e := range m.ListMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to SolutionRepositoryMock.List with params: %#v", *e.params)
		}
	}

	afterListCounter := mm_atomic.LoadUint64(&m.afterListCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.ListMock.defaultExpectation != nil && afterListCounter < 1 {
		if m.ListMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to SolutionRepositoryMock.List")
		} else {
			m.t.Errorf("Expected call to SolutionRepositoryMock.List with params: %#v", *m.ListMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcList != nil && afterListCounter < 1 {
		m.t.Error("Expected call to SolutionRepositoryMock.List")
	}

	if !m.ListMock.invocationsDone() && afterListCounter > 0 {
		m.t.Errorf("Expected %d calls to SolutionRepositoryMock.List but found %d calls",
			mm_atomic.LoadUint64(&m.ListMock.expectedInvocations), afterListCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *SolutionRepositoryMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockGetInspect()

			m.MinimockListInspect()
			m.t.FailNow()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *SolutionRepositoryMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *SolutionRepositoryMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetDone() &&
		m.MinimockListDone()
}
