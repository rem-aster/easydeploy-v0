// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.6
// source: runner.proto

package runner_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PlaybookServiceV1Client is the client API for PlaybookServiceV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlaybookServiceV1Client interface {
	RunPlaybook(ctx context.Context, in *RunPlaybookRequest, opts ...grpc.CallOption) (*RunPlaybookResponse, error)
	GetTaskStatus(ctx context.Context, in *PlaybookStatusRequest, opts ...grpc.CallOption) (*PlaybookStatusResponse, error)
}

type playbookServiceV1Client struct {
	cc grpc.ClientConnInterface
}

func NewPlaybookServiceV1Client(cc grpc.ClientConnInterface) PlaybookServiceV1Client {
	return &playbookServiceV1Client{cc}
}

func (c *playbookServiceV1Client) RunPlaybook(ctx context.Context, in *RunPlaybookRequest, opts ...grpc.CallOption) (*RunPlaybookResponse, error) {
	out := new(RunPlaybookResponse)
	err := c.cc.Invoke(ctx, "/runner.PlaybookServiceV1/RunPlaybook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playbookServiceV1Client) GetTaskStatus(ctx context.Context, in *PlaybookStatusRequest, opts ...grpc.CallOption) (*PlaybookStatusResponse, error) {
	out := new(PlaybookStatusResponse)
	err := c.cc.Invoke(ctx, "/runner.PlaybookServiceV1/GetTaskStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlaybookServiceV1Server is the server API for PlaybookServiceV1 service.
// All implementations must embed UnimplementedPlaybookServiceV1Server
// for forward compatibility
type PlaybookServiceV1Server interface {
	RunPlaybook(context.Context, *RunPlaybookRequest) (*RunPlaybookResponse, error)
	GetTaskStatus(context.Context, *PlaybookStatusRequest) (*PlaybookStatusResponse, error)
	mustEmbedUnimplementedPlaybookServiceV1Server()
}

// UnimplementedPlaybookServiceV1Server must be embedded to have forward compatible implementations.
type UnimplementedPlaybookServiceV1Server struct {
}

func (UnimplementedPlaybookServiceV1Server) RunPlaybook(context.Context, *RunPlaybookRequest) (*RunPlaybookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunPlaybook not implemented")
}
func (UnimplementedPlaybookServiceV1Server) GetTaskStatus(context.Context, *PlaybookStatusRequest) (*PlaybookStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskStatus not implemented")
}
func (UnimplementedPlaybookServiceV1Server) mustEmbedUnimplementedPlaybookServiceV1Server() {}

// UnsafePlaybookServiceV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlaybookServiceV1Server will
// result in compilation errors.
type UnsafePlaybookServiceV1Server interface {
	mustEmbedUnimplementedPlaybookServiceV1Server()
}

func RegisterPlaybookServiceV1Server(s grpc.ServiceRegistrar, srv PlaybookServiceV1Server) {
	s.RegisterService(&PlaybookServiceV1_ServiceDesc, srv)
}

func _PlaybookServiceV1_RunPlaybook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunPlaybookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaybookServiceV1Server).RunPlaybook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/runner.PlaybookServiceV1/RunPlaybook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaybookServiceV1Server).RunPlaybook(ctx, req.(*RunPlaybookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaybookServiceV1_GetTaskStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaybookStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaybookServiceV1Server).GetTaskStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/runner.PlaybookServiceV1/GetTaskStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaybookServiceV1Server).GetTaskStatus(ctx, req.(*PlaybookStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PlaybookServiceV1_ServiceDesc is the grpc.ServiceDesc for PlaybookServiceV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PlaybookServiceV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "runner.PlaybookServiceV1",
	HandlerType: (*PlaybookServiceV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RunPlaybook",
			Handler:    _PlaybookServiceV1_RunPlaybook_Handler,
		},
		{
			MethodName: "GetTaskStatus",
			Handler:    _PlaybookServiceV1_GetTaskStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "runner.proto",
}
