// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.6
// source: solution.proto

package solution_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SolutionV1Client is the client API for SolutionV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SolutionV1Client interface {
	// Получение доступных решений
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	// Создание задачи на деплой
	Deploy(ctx context.Context, in *DeployRequest, opts ...grpc.CallOption) (*DeployResponse, error)
	// Получение статуса деплоя
	GetDeployStatus(ctx context.Context, in *GetDeployStatusRequest, opts ...grpc.CallOption) (*GetDeployStatusResponse, error)
}

type solutionV1Client struct {
	cc grpc.ClientConnInterface
}

func NewSolutionV1Client(cc grpc.ClientConnInterface) SolutionV1Client {
	return &solutionV1Client{cc}
}

func (c *solutionV1Client) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/deploy.SolutionV1/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *solutionV1Client) Deploy(ctx context.Context, in *DeployRequest, opts ...grpc.CallOption) (*DeployResponse, error) {
	out := new(DeployResponse)
	err := c.cc.Invoke(ctx, "/deploy.SolutionV1/Deploy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *solutionV1Client) GetDeployStatus(ctx context.Context, in *GetDeployStatusRequest, opts ...grpc.CallOption) (*GetDeployStatusResponse, error) {
	out := new(GetDeployStatusResponse)
	err := c.cc.Invoke(ctx, "/deploy.SolutionV1/GetDeployStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SolutionV1Server is the server API for SolutionV1 service.
// All implementations must embed UnimplementedSolutionV1Server
// for forward compatibility
type SolutionV1Server interface {
	// Получение доступных решений
	List(context.Context, *ListRequest) (*ListResponse, error)
	// Создание задачи на деплой
	Deploy(context.Context, *DeployRequest) (*DeployResponse, error)
	// Получение статуса деплоя
	GetDeployStatus(context.Context, *GetDeployStatusRequest) (*GetDeployStatusResponse, error)
	mustEmbedUnimplementedSolutionV1Server()
}

// UnimplementedSolutionV1Server must be embedded to have forward compatible implementations.
type UnimplementedSolutionV1Server struct {
}

func (UnimplementedSolutionV1Server) List(context.Context, *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedSolutionV1Server) Deploy(context.Context, *DeployRequest) (*DeployResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deploy not implemented")
}
func (UnimplementedSolutionV1Server) GetDeployStatus(context.Context, *GetDeployStatusRequest) (*GetDeployStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeployStatus not implemented")
}
func (UnimplementedSolutionV1Server) mustEmbedUnimplementedSolutionV1Server() {}

// UnsafeSolutionV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SolutionV1Server will
// result in compilation errors.
type UnsafeSolutionV1Server interface {
	mustEmbedUnimplementedSolutionV1Server()
}

func RegisterSolutionV1Server(s grpc.ServiceRegistrar, srv SolutionV1Server) {
	s.RegisterService(&SolutionV1_ServiceDesc, srv)
}

func _SolutionV1_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SolutionV1Server).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploy.SolutionV1/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SolutionV1Server).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SolutionV1_Deploy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeployRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SolutionV1Server).Deploy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploy.SolutionV1/Deploy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SolutionV1Server).Deploy(ctx, req.(*DeployRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SolutionV1_GetDeployStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeployStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SolutionV1Server).GetDeployStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploy.SolutionV1/GetDeployStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SolutionV1Server).GetDeployStatus(ctx, req.(*GetDeployStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SolutionV1_ServiceDesc is the grpc.ServiceDesc for SolutionV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SolutionV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "deploy.SolutionV1",
	HandlerType: (*SolutionV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _SolutionV1_List_Handler,
		},
		{
			MethodName: "Deploy",
			Handler:    _SolutionV1_Deploy_Handler,
		},
		{
			MethodName: "GetDeployStatus",
			Handler:    _SolutionV1_GetDeployStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "solution.proto",
}
