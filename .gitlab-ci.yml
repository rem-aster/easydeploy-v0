stages:
  - lint
  - test
  - deploy

variables:
  PYTHON_IMAGE: python:alpine
  GOLANG_IMAGE: golang:alpine

# Lint Python code
lint_python:
  stage: lint
  image: $PYTHON_IMAGE
  before_script:
    - pip install ruff
  script:
    - ruff check runner
    - ruff check tests

# Lint Golang code
lint_golang:
  stage: lint
  image: $GOLANG_IMAGE
  script:
    - go install golang.org/x/lint/golint@latest
    - golint ./web_app
    - golint ./backend

# Golang unit testing
unit:
  stage: test
  image: $GOLANG_IMAGE
  script:
    - cd web_app
    - go test -v .
    - cd ../backend
    - go test -v .

# Integration testing
integration:
  stage: test
  image: $PYTHON_IMAGE
  before_script:
    - docker compose up -d --remove-orphans
    - pip install -r tests/requirements.txt
  script:
    - pytest tests/tests.py
    - docker compose down

# Deploy
deploy_prod:
  stage: deploy
  image: $PYTHON_IMAGE
  before_script:
    - pip install ansible
    - ansible-galaxy collection install community.docker
  script:
    - |
        ansible-playbook -i "${PROD_IP}," \
          --user "${PROD_USER}" \
          --extra-vars "ansible_ssh_pass=${PROD_PASSWORD}" deploy-prod.yml
  only:
    - main
  when: manual
