stages:
  - lint
  - test
  - deploy

variables:
  PYTHON_IMAGE: python:alpine
  GOLANG_IMAGE: golang:alpine

# Lint Python code
lint_python:
  stage: lint
  image: $PYTHON_IMAGE
  before_script:
    - pip install ruff
  script:
    - ruff check runner
    - ruff check tests

# Lint Golang code
lint_golang:
  stage: lint
  image: $GOLANG_IMAGE
  script:
    - go install golang.org/x/lint/golint@latest
    - golint ./web_app
    - golint ./backend

# Golang unit testing
unit:
  stage: test
  image: $GOLANG_IMAGE
  script:
    - go install github.com/a-h/templ/cmd/templ@latest
    - templ generate -path web_app
    - cd web_app
    - go test -v ./...
    - cd ../backend
    - go test -v ./...

# Integration testing
#integration:
#  stage: test
#  image: $PYTHON_IMAGE
#  services:
#    - docker:dind
#  before_script:
#    - apk add --no-cache docker-compose  # Install Docker Compose (and Docker if needed)
#    - docker-compose -v  # Verify Docker Compose is installed
#    - docker info  # Check if Docker is available
#    - docker compose up -d -v --remove-orphans
#    - pip install -r tests/requirements.txt
#  script:
#    - pytest tests/tests.py
#    - docker compose down -v

update:
  stage: deploy
  image: alpine:latest
  before_script:
    - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - chmod 400 "$PROD_KEY"
    - ssh-add "$PROD_KEY"
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
  script:
    - ssh root@easydeploy.ru "cd easydeploy && make down && git pull && make up"
  only:
    - main
  when: manual